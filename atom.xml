<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>ramblings of a PHP enthusiast</title>
 <link href="http://blog.cspray.net/atom.xml" rel="self"/>
 <link href="http://blog.cspray.net/"/>
 <updated>2015-08-02T12:55:19-04:00</updated>
 <id>http://blog.cspray.net/</id>
 <author>
   <name>Charles Sprayberry</name>
 </author>

 
 <entry>
   <title type="text">saying goodbye to SprayFire</title>
   <link href="http://blog.cspray.net/programming/2015/08/02/saying-goodbye-to-sprayfire.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2015-08-02T00:00:00-04:00</updated>
   <published>2015-08-02T00:00:00-04:00</published>
   <id>http://cspray.github.io/programming/2015/08/02/saying-goodbye-to-sprayfire</id>
   <content type="html">&lt;p&gt;If you’ve read my blog before you know about a project I worked on called SprayFire.
It was my homebrewed framework. It taught me a lot about design patterns, the need
for modular libraries, and helped get me a job. Some time ago I deleted the project.
This post talks about why I deleted the project… and what took its place.&lt;/p&gt;

&lt;h2 id=&quot;why-it-had-to-go&quot;&gt;why it had to go&lt;/h2&gt;

&lt;p&gt;I started to use SprayFire and realized it had a critical flaw for how I like to
structure and build applications. I’ve come to the belief that small, hyper-specific
libraries wired together is a better solution than one, monolithic architecture.
There’s a lot of really great libraries already out there that do what individual
SprayFire components did, only better.&lt;/p&gt;

&lt;p&gt;The project, while useful, simply wasn’t how I believe applications should be built
after lessons learned from experience. Instead of restructuring the framework for
what would be a 4th time I decided to simply start completely fresh with a brand
new project.&lt;/p&gt;

&lt;p&gt;While SprayFire, and its replacement, is an educational experience I also &lt;em&gt;want&lt;/em&gt;
other people to build an application on top of my framework. Knowing that the
project wasn’t something I believed in or supported I removed it from GitHub
instead of allowing it to exist. Sometimes programmers can develop an emotional
attachment with their code; no such attachment existed here. The code didn’t
serve its purpose and was removed.&lt;/p&gt;

&lt;p&gt;I’ve went back through all my old posts that reference SprayFire and have removed
links along with putting up a disclaimer where the project was mentioned.&lt;/p&gt;

&lt;h2 id=&quot;what-ive-been-up-to&quot;&gt;what I’ve been up to&lt;/h2&gt;

&lt;p&gt;Besides work-related coding, which has taken over more of the time I spend developing
software, I still contribute to other open source projects and write my own
libraries. Some of the cooler things include:&lt;/p&gt;

&lt;div class=&quot;github-repo-card&quot;&gt;
  &lt;h3 class=&quot;github-repo-card--name&quot;&gt;Labrador&lt;/h3&gt;
  &lt;p class=&quot;github-repo-card--description&quot;&gt;
    A microframework for PHP7 that ties together a DI Container, an event emitter,
    and a plugin system to facilitate building small-to-medium sized PHP applications.
  &lt;/p&gt;
  &lt;a href=&quot;https://github.com/cspray/labrador&quot;&gt;https://github.com/cspray/labrador&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;github-repo-card&quot;&gt;
  &lt;h3 class=&quot;github-repo-card--name&quot;&gt;Telluris&lt;/h3&gt;
  &lt;p class=&quot;github-repo-card--description&quot;&gt;
    A library that allows you to manage your application&#39;s environment. Includes
    the ability to have environment specific configurations and initializers.
    Also includes the ability to keep your production configurations secret.
  &lt;/p&gt;
  &lt;a href=&quot;https://github.com/cspray/telluris&quot;&gt;https://github.com/cspray/telluris&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;github-repo-card&quot;&gt;
  &lt;h3 class=&quot;github-repo-card--name&quot;&gt;Delegatus&lt;/h3&gt;
  &lt;p class=&quot;github-repo-card--description&quot;&gt;
    A library that allows you to delegate method calls on an object to dependencies
    or anonymous functions.
  &lt;/p&gt;
  &lt;a href=&quot;https://github.com/cspray/delegatus&quot;&gt;https://github.com/cspray/delegatus&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;github-repo-card&quot;&gt;
  &lt;h3 class=&quot;github-repo-card--name&quot;&gt;CodeAnvil&lt;/h3&gt;
  &lt;p class=&quot;github-repo-card--description&quot;&gt;
    An object-oriented API to generate PHP7 code. Includes support for scalar
    type hints, return types and several other PHP7 features.
  &lt;/p&gt;
  &lt;a href=&quot;https://github.com/cspray/code-anvil&quot;&gt;https://github.com/cspray/code-anvil&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;github-repo-card&quot;&gt;
  &lt;h3 class=&quot;github-repo-card--name&quot;&gt;Platelets&lt;/h3&gt;
  &lt;p class=&quot;github-repo-card--description&quot;&gt;
    A native templating library that encourages the use of composition to build
    `Renderers` as simple or as powerful as you need.
  &lt;/p&gt;
  &lt;a href=&quot;https://github.com/cspray/platelets&quot;&gt;https://github.com/cspray/platelets&lt;/a&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">you decided to write a framework anyway</title>
   <link href="http://blog.cspray.net/programming/2014/01/09/you-decided-write-framework-anyway.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2014-01-09T00:00:00-05:00</updated>
   <published>2014-01-09T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2014/01/09/you-decided-write-framework-anyway</id>
   <content type="html">&lt;p&gt;In case you missed my post &lt;a href=&quot;http://cspray.github.io/2013/03/05/you-shouldnt-write-framework.html&quot;&gt;you shouldn’t write a framework&lt;/a&gt; I’m not a huge proponent of writing your own PHP framework. This may sound contradictory coming from a guy who has devoted a not-insignificant amount of time working on &lt;a href=&quot;https://github.com/cspray/labrador&quot;&gt;his own framework&lt;/a&gt;. Regardless of all the reasons why you shouldn’t write your own framework you’re probably going to anyway; it almost seems to be a rite of passage in the PHP community. I’m not here to convince you of the folly in doing so but instead give you some advice for your own framework creation. I’ve always thought if you’re gonna do something stupid you might as well do it as smartly as you can.&lt;/p&gt;

&lt;h3 id=&quot;write-apps-with-it&quot;&gt;write apps with it&lt;/h3&gt;

&lt;p&gt;Seems like this article is just gonna be laced with hypocrisy. In the previous article one of the major negatives in building your own framework is that you really shouldn’t build apps with it. However, if you really want to build a good framework that &lt;em&gt;other developers&lt;/em&gt; will want to use you need to, ya know, &lt;strong&gt;use it&lt;/strong&gt;. Frameworks are apps just like any other piece of software. In the case of a framework the end user is a developer and your app’s job is to help easily create other apps.&lt;/p&gt;

&lt;p&gt;What I’m trying to say is that if you don’t ever use your framework to build apps you won’t find the pitfalls and pain points and places the design fails. No amount of unit tests or design or brainstorming will yield a design so failproof that users won’t find a way to punch holes into it. And your users are the kind of people that &lt;strong&gt;love&lt;/strong&gt; punching holes into things. It would be great if you could find other people to build apps with your framework. But, good luck with that. PHP frameworks are a dime a dozen and you better have something pretty different to warrant a lot of constructive attention and feedback. Build your own personal apps with it, preferably ones that aren’t public facing or wouldn’t contain any really sensitive content. Take what you learn building apps with your framework to make it not suck as much. It will also help you figure out the documentation you need to write to let people know how easy it is to get up and running.&lt;/p&gt;

&lt;h3 id=&quot;experiment-with-crazy-ideas&quot;&gt;experiment with crazy ideas&lt;/h3&gt;

&lt;p&gt;Your journey must be viewed as an educational experience intended to let you learn new things. To learn new things you have to actually do new things. If you’re creating your framework just to reimplement exactly the same thing as existing frameworks then you’re doing it wrong. You should be doing something &lt;em&gt;different&lt;/em&gt; and experimenting with new ideas.&lt;/p&gt;

&lt;p&gt;Early in your framework’s life span is the greatest time to experiment. You’ll likely not have many users that require support so you’re able to change things quickly and drastically. Take advantage of this by implementing new ideas, experimenting with them to see if they work and adjusting the design as necessary. In the early volatile time for your framework do new, crazy stuff. If it works keep it in; if it doesn’t rip it back out.&lt;/p&gt;

&lt;h3 id=&quot;design-modular-from-the-get-go&quot;&gt;design modular from the get go&lt;/h3&gt;

&lt;p&gt;SprayFire has always been intended to be a modular framework that takes different standalone modules and uses them together to make a working web development framework. Even with this goal being there since day 1 the initial design of the framework was a single, monolithic repo and directory structure. This, in hindsight, was a big mistake. Now, as I’m ripping each module into its own repo I’ve spent a lot of time doing so and have found some drawbacks to certain aspects of the design. Quite a few of the things I’ve found so far would have been caught in the initial planning phase if I had been forced to design modular from the get go. If you design components of your framework to be modular you’ll find that these standalone libraries can be more easily integrated into other projects and the overall quality of the codebase increases.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-up---tldr&quot;&gt;wrapping up - tl;dr&lt;/h3&gt;

&lt;p&gt;I think something that was missed in my last article was that I do believe there are benefits to writing your own framework. I think a lot of that value is primarily in learning about PHP and software architecture. I’ve taken a break from SprayFire recently as I’ve started a new job but I am starting to get to a point I’ll be picking back up development on the project. As I look back over the project these are the things I wish I had done more of earlier in the framework’s development.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">thoughts on JSON and OSS licensing</title>
   <link href="http://blog.cspray.net/programming/2013/08/21/thoughts-json-oss-license.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2013-08-21T00:00:00-04:00</updated>
   <published>2013-08-21T00:00:00-04:00</published>
   <id>http://cspray.github.io/programming/2013/08/21/thoughts-json-oss-license</id>
   <content type="html">&lt;p&gt;If you’re not aware, recently there’s been some PHP drama about &lt;a href=&quot;http://philsturgeon.co.uk/blog/2013/08/fud-cracker-php-55-never-lost-json-support&quot;&gt;PHP “losing” JSON support&lt;/a&gt;. Obviously this isn’t the case and it turns out some people, getting their PHP through certain distributions, weren’t getting the JSON extension by default. It all boils back to &lt;a href=&quot;https://bugs.php.net/bug.php?id=63520&quot;&gt;this “bug” reported to PHP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By now I’m sure if you’re reading my blog about PHP you already know about &lt;a href=&quot;http://www.json.org/license.html&quot;&gt;JSON.org’s license&lt;/a&gt; amendment to the normal MIT license:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Software shall be used for Good, not Evil.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ultimately this clause caused certain distributions to stop supporting PHP’s internal JSON implementation because it relies on JSON.org code. PHP’s maintainers have decided they will continue to support the implementation, even if certain maintainers don’t.&lt;/p&gt;

&lt;p&gt;Ok, now that everybody’s all settled down here let’s get to the actual important part of this story.&lt;/p&gt;

&lt;h3 id=&quot;subjective-shit-in-software-licenses-is-stupid&quot;&gt;subjective shit in software licenses is stupid&lt;/h3&gt;

&lt;p&gt;Douglas Crockford is clearly a smart man and knows more about computer programming in his big toe than I possess in my entire body…but this was a bone-headed move to make. The concept of good and evil is entirely subjective and can’t be proven, without significant resources, in a court of law. This one clause makes the entire license legally ambiguous; ultimately it winds up becoming a problem where software developers already have enough: legal issues.&lt;/p&gt;

&lt;p&gt;For an open source software that is attempting to, and did, set a web standard this is just a silly thing to perpetuate. Crockford and JSON.org have already stated they don’t see anything wrong with the license and they just don’t care about the legal quandary it creates. Which is a shame because it brings about the type of situation where bloggers are talking about license minutiae instead of solving problems and software development. Oh, it also impacts real life companies conducting business in software development.&lt;/p&gt;

&lt;h3 id=&quot;leave-the-subjective-wording-at-the-door&quot;&gt;leave the subjective wording at the door&lt;/h3&gt;

&lt;p&gt;There’s another license that takes this clause to extremes, the &lt;a href=&quot;http://www.dbad-license.org/&quot;&gt;Don’t Be A Dick Public License&lt;/a&gt;. The entire premise of this license is ridiculous and what’s even more ridiculous is that software is being released under it. These licenses make it harder for software developers, not easier. Your attempts to be funny are better served not in a legal document. Because that’s exactly what any license is, a legal document.&lt;/p&gt;

&lt;p&gt;Dealing with legal issues is a fact of life in the software development industry. I just wish that software developers didn’t actively muddy the legal waters with their work. It only makes things harder for your fellow programmers.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">Web Development, the problem</title>
   <link href="http://blog.cspray.net/tech-and-society/2013/07/25/web-dev-problems.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2013-07-25T00:00:00-04:00</updated>
   <published>2013-07-25T00:00:00-04:00</published>
   <id>http://cspray.github.io/tech-and-society/2013/07/25/web-dev-problems</id>
   <content type="html">&lt;p&gt;This is part 1 of a 2 part series regarding my thoughts on the current state of web development. This article discusses the problems the web software industry faces today. The second part will discuss some potential solutions to some of the problems discussed.&lt;/p&gt;

&lt;p&gt;There’s little doubt as to the importance of web-based software in today’s world. The web powers a wide variety of software and is becoming more critically important in day to day society. We consume our news, handle our finances, connect with friends and family, watch TV and live a large portion of our lives through web-based software. There has been a great number of benefits that web-based software has provided humanity; going forward the benefits will only increase as technology advances and new ideas are created.&lt;/p&gt;

&lt;p&gt;However, I feel that the road ahead for the web-software industry is a volatile, dangerous path. No longer are network connected devices a niche in society. More and more devices are connecting to the Internet where they interact with software that is growing more and more complex. Soon a house full of network-connected devices will be the norm. While there will undoubtedly be numerous benefits from this “Internet of things” there is also a huge security risk as every new device is a new attack vector; the more critical the device the more serious the attack risk. It’s a huge future problem and it exists because…&lt;/p&gt;

&lt;h3 id=&quot;web-software-is-utter-crap&quot;&gt;Web software is utter crap&lt;/h3&gt;

&lt;p&gt;Every app you use that connects to the Internet – and these days that’s virtually all of them – &lt;em&gt;must&lt;/em&gt; execute code on a server. There’s a really good possibility that much of that code is crap. Utter and complete crap that’s full of security vulnerabilities. Vulnerabilities that, when exploited, have the potential to wreak havoc on individual lives and entire economies. While there may be large, powerful organizations with the resources to provide web software without these vulnerabilities they are the exception to the rule.&lt;/p&gt;

&lt;p&gt;There’s a multitude of historical reasons for &lt;em&gt;how&lt;/em&gt; the web software industry has reached this level of crappiness. This article isn’t about how we got here though; more on how we, as a society, continue to perpetuate this problem and potential solutions. I feel that the most critical problem is…&lt;/p&gt;

&lt;h3 id=&quot;lack-of-appropriate-education&quot;&gt;Lack of appropriate education&lt;/h3&gt;

&lt;p&gt;The barrier to web software development is relatively low compared to other sofware industries. This means that developers are often creating web sites and functionality, that will be used by the public, without fully understanding the complexity and risk in software development. Unfortunately, and especially with PHP, the vast amount of tutorials and documentation are outdated or teach bad practices. This lack of appropriate education for the developer is easily one of the biggest hurdles in fixing the crappiness of web software.&lt;/p&gt;

&lt;p&gt;Unfortunately the challenge in providing appropriate education is a huge issue facing the web software industry. Much of the inferior documentation has achieved a level of inertia that will be difficult to stop. In addition, the onus for determining the validity of documentation falls on the reader. This is highly susceptible to the problem of “you don’t know what you don’t know.” Simply put, the people reading the documentation often can’t tell whether or not the article is accurate or worth learning.&lt;/p&gt;

&lt;p&gt;In other industries higher learning organizations are capable of educating people to be productive in their chosen craft. However, software development is, sadly, severely lacking in that department as well. Much of the academic programming courses are, well, exactly that. Academic. Much of the material taught in schools is very useful and can often times help with a deeper understanding of computer science. That being said often times this emphasis on the theoretical leaves a graduate with very little real life programming skills. A slew of things in practical programming education should be given more emphasis earlier and more often.&lt;/p&gt;

&lt;p&gt;Developer education isn’t the only big hurdle and may not be as critical as…&lt;/p&gt;

&lt;h3 id=&quot;customer-awareness&quot;&gt;Customer awareness&lt;/h3&gt;

&lt;p&gt;While developer education is important to fixing the problems with web software today it is all for naught if customer awareness does not increase. A large part of the reason that we have gotten to this point is that the customer spending the money often isn’t aware of, or just doesn’t care about, the potential risks. Ultimately until customers reach a level of awareness and concern for these problems they will continue to exist. Only when customers demand that their software be defensible and well written will businesses care enough to invest the time and resources into developing software correctly.&lt;/p&gt;

&lt;p&gt;This is a huge problem because the only solution is for the customer to have more knowledge on, what is admittedly very technical, software development. It is completely unreasonable to expect the majority of society to understand enough about software for this to be solved on their end. Unfortunately basic economics states that a better educated customer makes better decisions. As long as there are people willing to spend money on and use web software that is not well defended we will have a problem with vulnerable web software.&lt;/p&gt;

&lt;p&gt;Let us not forget…&lt;/p&gt;

&lt;h3 id=&quot;the-industry-is-still-in-its-infancy&quot;&gt;The industry is still in its infancy&lt;/h3&gt;

&lt;p&gt;The software industry as a whole is still relatively young, but this is particularly true of web software. I think the best way to communicate the problem with the industry being young can be summed up best with an analogy. An analogy about building houses.&lt;/p&gt;

&lt;p&gt;Let’s go back thousands of years when primitive people were abandoning their nomadic ways and settling down into civilizations. One of the most important steps in this transition from nomad to civilization was building more permanent housing. Although these initial houses were very primitive they were a drastic improvement over the previous system of just bedding down wherever you happened to end up that day.&lt;/p&gt;

&lt;p&gt;However, these houses were also extremely haphazard and by today’s standards wouldn’t even be called shacks. As problems with these buildings became more apparent and society became smarter we realized more had to be done. We couldn’t just let anybody throw up a shack and live in it. There needed to be criteria that builders had to follow and a way to ensure the buildings were safe for human occupation. Now you can’t simply construct a building anywhere you want – at least not in the United States. You need permits and inspections and design plans and to &lt;em&gt;prove&lt;/em&gt; that you can build a safe house.&lt;/p&gt;

&lt;p&gt;The web software industry, in a sense, is still building shacks. We haven’t been around long enough to fully understand how to efficiently create “buildings” that don’t fall over in a strong breeze. We also don’t have a long history teaching us how, and why, we should be doing things a certain way. We certainly don’t have stringent criteria on who is allowed to create a web site and how that website should be created.&lt;/p&gt;

&lt;h3 id=&quot;the-big-stuff&quot;&gt;The big stuff&lt;/h3&gt;

&lt;p&gt;These are, in my opinion, the biggest problems facing the web software industry in improving the quality and defensibility of software. This doesn’t represent a complete list of even all of the arguments and facets of the existing problems. A lot of questions are left open with no clear, easy solutions. There are things we can do to make it better.&lt;/p&gt;

&lt;p&gt;That part is coming.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">why I TDD</title>
   <link href="http://blog.cspray.net/programming/2013/06/06/why-i-tdd.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2013-06-06T00:00:00-04:00</updated>
   <published>2013-06-06T00:00:00-04:00</published>
   <id>http://cspray.github.io/programming/2013/06/06/why-i-tdd</id>
   <content type="html">&lt;p&gt;A little over a year and a half ago I started working on the SprayFire project and &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;Test Driven Development&lt;/a&gt;. At the time I started with unit testing I really wasn’t sure what the benefits, if any, would be. Now having had time spent writing a decent sized codebase and many unit tests the benefits are obvious and numerous.&lt;/p&gt;

&lt;p&gt;Below are some of the primary reason I like to unit test my personal projects and why you might find success in unit testing as well.&lt;/p&gt;

&lt;h3 id=&quot;im-confident-in-my-codebase&quot;&gt;I’m confident in my codebase&lt;/h3&gt;

&lt;p&gt;Without tests developers live in a persistent state of worry and fear. Is this commit going to break something? Does this commit even satisfy the requirements of the project? Without unit tests it is hard to answer these questions when you develop new features. Without unit tests it is increasingly harder to answer these questions 6 months down the road when half of your development team has added to the project and refactored your code.&lt;/p&gt;

&lt;p&gt;However with unit tests I am confident in my ability to adapt the codebase to changes. I’m confident that I can make those changes and not break other parts of the system. If I do break other parts of the system I have a warning before anything bad happens in a production environment. This makes me worry less about committing code or making changes because I have visual, undeniable proof of my work.&lt;/p&gt;

&lt;h3 id=&quot;it-makes-me-think-about-what-im-coding&quot;&gt;it makes me think about what I’m coding&lt;/h3&gt;

&lt;p&gt;A TDD myth is that by practicing this type of development you get a modular, well structured, clean system regurgitated out of the other end of the process. Unfortunately, that’s not really how it works. Writing unit tests and TDD are not magical processes that make your design instantly great.&lt;/p&gt;

&lt;p&gt;Thought, effort and research still have to go into the designs of your codebases. TDD helps force you think about the design up front &lt;em&gt;before you write any code&lt;/em&gt;. You can think of your unit tests as the &lt;strong&gt;very first app utilizing your code base&lt;/strong&gt;. If, while creating this initial app, you find that it is hard or clumsy to write the tests then your actual users will have a hard or clumsy time using your code.&lt;/p&gt;

&lt;h3 id=&quot;it-makes-you-feel-good-and-is-fun&quot;&gt;it makes you feel good and is fun!&lt;/h3&gt;

&lt;p&gt;No, seriously. Writing unit tests really is a lot of fun and you’ll feel better having done it. Writing a test, seeing it fail and then writing code to make that test &lt;em&gt;succeed&lt;/em&gt; is a huge feeling of accomplishment. The great thing is if you’re doing TDD right then you’ll get that feeling of accomplishment frequently and continuously throughout the software lifecycle.&lt;/p&gt;

&lt;p&gt;After more practice the &lt;span class=&quot;text-danger&quot;&gt;red&lt;/span&gt;/&lt;span class=&quot;text-success&quot;&gt;green&lt;/span&gt;/&lt;span class=&quot;text-danger&quot;&gt;red&lt;/span&gt; becomes a comfortable way to develop. You no longer wonder “How do I start this project?”; you know what to do…write a unit test. Eventually, if you’re passionate enough about programming, I firmly believe you’ll have a lot of fun writing unit tests and TDD.&lt;/p&gt;

&lt;h3 id=&quot;you-should-write-tests-too&quot;&gt;you should write tests too&lt;/h3&gt;

&lt;p&gt;There’s a variety of different ways to create software. Do what’s best for you, makes you productive and results in maintainable, easy-to-read software. However, if you haven’t tried TDD I strongly suggest that you do. Give it a real shot too; not just write a single test and call it a day. Finish your next small project using TDD philosophies, you might just find that you like it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">you shouldn't write a framework</title>
   <link href="http://blog.cspray.net/programming/2013/03/05/you-shouldnt-write-framework.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2013-03-05T00:00:00-05:00</updated>
   <published>2013-03-05T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2013/03/05/you-shouldnt-write-framework</id>
   <content type="html">&lt;p&gt;It is almost a rite of passage in the PHP community. If you’ve ever done any serious object oriented PHP you’ve probably created, or at least used, a framework of some kind. There are literally thousands of shitty frameworks out there that will never get used for anything. Mine is SprayFire.&lt;/p&gt;

&lt;p&gt;My framework started as a learning experience. I had gotten into the internals for some of the more popular frameworks and realized that I could probably do what they were doing, what I was doing with the mainstream frameworks at the time was pretty simple stuff. Soon SprayFire turned into something that I spent quite a bit of my spare time developing. It has been an interesting experience and has provided me with quite a few theoretical benefits and, maybe, some more tangible benefits as well.&lt;/p&gt;

&lt;p&gt;But I’m not sure writing your own framework is a smart move. You probably shouldn’t, but maybe should, write your own PHP framework.&lt;/p&gt;

&lt;h3 id=&quot;you-shouldnt-write-a-framework-becausehellip&quot;&gt;you shouldn’t write a framework because…&lt;/h3&gt;

&lt;h4 id=&quot;it-is-highly-unproductive&quot;&gt;it is highly unproductive&lt;/h4&gt;

&lt;p&gt;Chances are you won’t be getting paid to write your framework. Chances are also pretty good that you won’t ever use your framework to create an application that generates revenue. It just isn’t smart to use a homebrewed solution for a lot of things just because there’s so many other frameworks out there that are battle hardened and handle problems you don’t even know exist yet. There’s a high probability that code you write implementing your own framework is a complete waste of your time…from a financial perspective.&lt;/p&gt;

&lt;p&gt;Build something else instead. Solve some problem that isn’t already solved. Build a mobile app and create a PHP powered back-end. Launch your own small business creating websites using already existing frameworks. There’s a slew of things you can do with PHP that are financially productive. &lt;strong&gt;Writing a framework is very rarely one of them.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;youre-gonna-want-to-build-applications-with-it&quot;&gt;you’re gonna want to build applications with it&lt;/h4&gt;

&lt;p&gt;Nobody is going to put forth the time and effort needed to build even a semi-useable framework and just throw it all away. You’re gonna want to use your creation for something. It’s only natural. The problem is that you probably shouldn’t use it for anything serious. As you go through using your framework for applications you’re gonna realize where your framework is lacking something fundamental. Then you have to make a decision, hack around the limitations of your still fledgling framework or put your revenue-making project on hold to go implement the changes in your framework. Your framework will also probably introduce all kinds of vulnerabilities and unforeseen problems that other frameworks have already solved because they’ve already experienced them.&lt;/p&gt;

&lt;h3 id=&quot;you-should-write-a-framework-becausehellip&quot;&gt;you should write a framework because…&lt;/h3&gt;

&lt;h4 id=&quot;youll-learn-stuff-about-php-not-a-framework&quot;&gt;you’ll learn stuff about &lt;em&gt;PHP&lt;/em&gt;, not a framework&lt;/h4&gt;

&lt;p&gt;For the most part if you use a framework you’ll be learning the framework and not PHP. That isn’t to say you won’t learn PHP at all. You’ll learn the proper syntax and how to make PHP and your framework do things. There’s nothing necessarily wrong with that. Doing things is pretty damn important and is a large part of the reason why you’re a developer, to make computers do things. But, in depth knowledge of the language you’re utilizing isn’t necessarily a bad thing either. There’s quirks and traps in the language that you’ll never know unless you slavishly follow PHP internals, bugs and mailing lists and have a near photographic memory or you experience them. Writing your own framework forces you to get closer to all those warts on PHP.&lt;/p&gt;

&lt;h4 id=&quot;it-is-a-tangible-code-base-you-can-put-in-your-portfolio&quot;&gt;it is a tangible code base you can put in your portfolio&lt;/h4&gt;

&lt;p&gt;Even if the framework is never used for anything chances are it’ll grow to be a somewhat substantial codebase if you’ve put forth serious effort into development. You can use this in your portfolio to show potential employers, “Hey, this is some code I’ve written and how I solve problems.”&lt;/p&gt;

&lt;p&gt;Your mileage may vary in the value of this but for students, beginners and people just starting out having &lt;em&gt;something&lt;/em&gt; that you can point to as an example of how you write code is hugely important. You might be a great developer but suck at business skills and just can’t land clients. Whatever your reason for needing to do so a framework is definitely something you can put in your portfolio and it helps. I’ve gotten 2 job interviews, in some part, thanks to SprayFire. One of those interviews landed me my current job.&lt;/p&gt;

&lt;p&gt;That being said, an actual &lt;strong&gt;application&lt;/strong&gt; is a tangible code base you can put in your portfolio too so this is really a weak argument. I really couldn’t come up with another reason beyond learning more about PHP for writing your own framework.&lt;/p&gt;

&lt;h3 id=&quot;but-really-dont-write-a-framework&quot;&gt;but really, don’t write a framework&lt;/h3&gt;

&lt;p&gt;If I had to suggest a fresh PHP developer just starting down the programming career path I would recommend them to &lt;strong&gt;not write their own framework&lt;/strong&gt;. It is hugely unproductive, is only beneficial if you plan to stick with the language for an extended period of time and can be a huge time sink where productivity goes to die. Write a useful app instead that solves a personal problem or you can make a living off of.&lt;/p&gt;

&lt;p&gt;That being said I’m gonna keep on developing SprayFire. Clearly I’m a masochist.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">programming is not just writing code</title>
   <link href="http://blog.cspray.net/programming/2012/08/13/programming-not-just-writing-code.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-08-13T00:00:00-04:00</updated>
   <published>2012-08-13T00:00:00-04:00</published>
   <id>http://cspray.github.io/programming/2012/08/13/programming-not-just-writing-code</id>
   <content type="html">&lt;p&gt;When I first started my journey to become a professional programmer almost 2 years ago
I focused almost entirely on the “learning how to code” aspect.  While this is very important,
and something I would recommend to beginners, there are other aspects to becoming a great
programmer that are just as, if not more, important than actually knowing how to write code.
A lot of these things apply to all manners of professions but really become evident in the
programming industry.&lt;/p&gt;

&lt;h3 id=&quot;communication&quot;&gt;communication&lt;/h3&gt;

&lt;p&gt;Arguably this is the most critical aspect of being a professional programmer, even more
critical than the code writing aspect.  Whether it is your client, your boss or other programmers
there is an essential need to be able to communicate.  This doesn’t just mean being able to
speak eloquently or write beautiful prose.  You need to be able to &lt;em&gt;listen&lt;/em&gt; and determine
what the other person is trying to tell you…even if they could work on their communication
skills.&lt;/p&gt;

&lt;h3 id=&quot;reading-code&quot;&gt;reading code&lt;/h3&gt;

&lt;p&gt;It is easy to learn and practice writing code, it is another beast altogether to learn
how to &lt;em&gt;read&lt;/em&gt; code.  Chances are you’ll spend as much, or more, time reading code as
you do writing it.  You need to be able to look at a body of source code and determine what
it is doing, and hopefully why it is doing it.  Some of that is gonna be based on the quality
of the code that you’re reading.  Do the variables and functions have proper names?  Are blocks
of code kept short and sweet?  Does the documentation do a good job of providing the details
needed without interfering with the actual code reading process?  But, even if the code doesn’t
have these things you still need to have some capability to determine what poorly written
code is doing.&lt;/p&gt;

&lt;h3 id=&quot;defend-your-position&quot;&gt;defend your position&lt;/h3&gt;

&lt;p&gt;This goes hand in hand with proper communication.  You need to be able to defend why you
did something that you did, perhaps to your client, your boss or your teammates.  If you can’t
defend your position on why you did something the way you did then you’ll never get any of
your cool ideas or concepts integrated into projects.  More importantly if you can’t defend
your position then your idea probably sucks anyway and if it doesn’t suck other people will
think that it does.&lt;/p&gt;

&lt;h3 id=&quot;a-thick-skin&quot;&gt;a thick skin&lt;/h3&gt;

&lt;p&gt;You need to have a thick skin in any career field but it becomes far more of a necessity in
the programming industry.  Your work will undoubtedly be criticized.  Sometimes that criticism
is warranted and the person is just trying to help you grow.  Other times the criticism is going
way overboard and maybe the other person had a bad day or is just being a prick.  Either way,
constructive criticism or not, you need to know how to take it.  Either absorb the knowledge they
are trying to throw your way or just let it roll off your back.  If you take criticism personally
you will fail in this industry and likely grow to hate programming in general.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;Obviously writing good code is a big part of being a professional programmer.  But, don’t
fall into the trap of thinking this is the only thing that matters.  The software development
industry is hugely complex and you aren’t going to be only working with computers.  You’ll work
with human beings too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">the model, a layer and a class</title>
   <link href="http://blog.cspray.net/programming/2012/07/07/the-model-layer-and-class.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-07-07T00:00:00-04:00</updated>
   <published>2012-07-07T00:00:00-04:00</published>
   <id>http://cspray.github.io/programming/2012/07/07/the-model-layer-and-class</id>
   <content type="html">&lt;p&gt;Lately I’ve been giving some thought to the Model in SprayFire and figured I would flesh out the concept as a blog post.  I’m going to discuss how my interpretation of this, most critical of layers, differs from many you may have already encountered or read about.  For starters, the Model, in OOP designed architecture, is actually two-headed; it is both a &lt;em&gt;layer&lt;/em&gt; and a &lt;em&gt;class&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;model-as-a-layer&quot;&gt;model as a layer&lt;/h3&gt;

&lt;p&gt;In most common usage the Model is a layer of services designed to accomplish some real world task, likely involving the use and manipulation of data.  This is the most important of the three letters in any MVC-like architecture, essentially this layer is your application.  It is most important that this layer stays isolated from the View/Responder and Controller.  Well designed Model layers can stand alone, independent from response related systems.&lt;/p&gt;

&lt;p&gt;What services though?  That’s a pretty broad term and can be interpreted to be, well, any object you create.  There are specific types of services the Model layer needs though.&lt;/p&gt;

&lt;h4 id=&quot;data-access&quot;&gt;data access&lt;/h4&gt;

&lt;p&gt;As I mentioned before, the Model layer involves some kind of use and/or manipulation of data.  The &lt;strong&gt;data access service&lt;/strong&gt; provides the means for that to happen.  Note that I’m calling it data &lt;em&gt;access&lt;/em&gt; and not data&lt;em&gt;base&lt;/em&gt;.  A lot of the times you are accessing a database, but other times you aren’t.  It might be a request to a web-based API or some other non-database service.&lt;/p&gt;

&lt;h4 id=&quot;application-logic&quot;&gt;application logic&lt;/h4&gt;

&lt;p&gt;If the data access system is &lt;em&gt;how&lt;/em&gt; you work with data then the application logic is  &lt;em&gt;what&lt;/em&gt; you do with that data.  Algorithms and objects that determine if the request is valid, what should occur to data and what data should be returned in response to the request is your web application.  The application logic is basically the brains of the outfit.&lt;/p&gt;

&lt;h4 id=&quot;data-validation&quot;&gt;data validation&lt;/h4&gt;

&lt;p&gt;I thought about leaving this in the application logic section.  However, I feel that this service can be sufficiently abstracted so that different Models can use the same service and simply pass in appropriate parameters.  Reasoning behind this is that web requests and data come in as a string, there’s only so many different types of things you can do to a string.  This service ensures that the business logic gets fed data in the format it expects.&lt;/p&gt;

&lt;p&gt;This may not necessarily be all the services that a Model needs.  Its hard to say for certain what any Model will need, each problem is different and you can solve that problem in a multitude of ways.  Depending on your design the Model layer may involve other services but chances are they’ll at the very least use something similar to that described above.&lt;/p&gt;

&lt;h3 id=&quot;model-as-a-class&quot;&gt;model as a class&lt;/h3&gt;

&lt;p&gt;You’ve built up this great Model layer that serves as an application solving some real world problem.  Now, you need a way to access and work with this layer from your response system.  This is where the Model as a class comes into play.  Think about it as the public API for the layer you just built.&lt;/p&gt;

&lt;p&gt;This class is not a representation of a database or a database table.  It absolutely should not extend a database connection object.  It also shouldn’t expose things related to CRUD functionality.  That’s something delegated to the data access system; if your Model exposes this kind of functionality it is leaking an abstraction.  The API for this class should cleanly represent real world tasks that need to be carried out.&lt;/p&gt;

&lt;h3 id=&quot;in-summary&quot;&gt;in summary&lt;/h3&gt;

&lt;p&gt;The Model is the most critical of systems in any MVC-like architecture.  It should be able to stand independent from any response system, possibly serving more than one response system at a time.  The Model is really two-headed involving a layer to access and work with data and, in OOP architecture, a class to serve as a public API to the layer.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title type="text">when and why to use Value Objects</title>
   <link href="http://blog.cspray.net/programming/2012/06/30/when-why-use-value-objects.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-06-30T00:00:00-04:00</updated>
   <published>2012-06-30T00:00:00-04:00</published>
   <id>http://cspray.github.io/programming/2012/06/30/when-why-use-value-objects</id>
   <content type="html">&lt;p&gt;Recently I’ve dived back into SprayFire and one of the things that I have been working on is making use of &lt;a href=&quot;http://martinfowler.com/bliki/ValueObject.html&quot;&gt;Value Objects&lt;/a&gt;.  I have given some thought to when should I use a Value Object and when should I just use an associative array.  After all, PHP is not a purely object-oriented language, there are many paths to your destination, and arrays in PHP are extremely powerful and useful.  But, then again, so are objects.  When should you use a value object over an array?  &lt;em&gt;Why&lt;/em&gt; should you use a Value Objects?&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-value-objects-over-arrays&quot;&gt;when to use value objects over arrays&lt;/h3&gt;

&lt;p&gt;The true answer, like most subjective things in software development, boils down to proper analysis of your application and making good decisions based on that analysis.  There is no single, this is the right way 100% of the time, answer.  Do what is best for you and makes sense.&lt;/p&gt;

&lt;p&gt;Going beyond that though there are guidelines that I use to help me make that decision.  The first guideline is to &lt;strong&gt;remember the power of arrays in PHP&lt;/strong&gt;.  There’s all kinds of cool things that you can do with &lt;a href=&quot;http://php.net/manual/en/ref.array.php&quot;&gt;array functions&lt;/a&gt; that objects don’t easily allow.  Also remember that arrays are less resource intensive then objects.  If you’re planning on creating a large number of items then arrays might be the better choice.&lt;/p&gt;

&lt;p&gt;After I’ve reasoned that in common use cases the potential Value Object wouldn’t need any of those array functions then I look to see if it is a confined, limited and/or known set of key/value pairs that I’ll be working with.  I think a big part of the value, pun intended, with Value Objects is that they are more &lt;em&gt;expressive&lt;/em&gt;.  This expressiveness means that a Value Object should represent a distinct set of data, that your average developer can deduce simply by look at the name of the object.  If the data in the array is widely dynamic or a numerically indexed list of data then obviously this doesn’t make it easy to keep our set of data relational.&lt;/p&gt;

&lt;p&gt;A great example of when to use a Value Object would be a data source login.  Perhaps something like…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataAccessCredentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sourceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sourceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sourceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sourceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSourceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sourceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Credentials&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// compare fields here to determine equality&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This implementation has a couple things going for it.  It is immutable, once the object is constructed there’s no changing the values.  The object supplies a method to check equality, allowing us to compare two Value Objects the way they should be compared.  Finally, the data belongs together.  All of those properties are perfectly reasonable to be a part of this object and relate to one another.&lt;/p&gt;

&lt;p&gt;On the opposite end of that, something like a result set from a call to the data access object using those credentials should probably be returned as an array.  The results are likely to be varied, highly dynamic and quite possibly very large.  All these things definitely make the array way more attractive.&lt;/p&gt;

&lt;h3 id=&quot;why-you-should-use-value-objects&quot;&gt;why you should use Value Objects&lt;/h3&gt;

&lt;div class=&quot;value-object-pro&quot;&gt;
    **Expressiveness and Type Hinting**
    Obviously one of the biggest pros to a Value Object is the parameter type hinting that is now allowed and the expressiveness of your code.  It is far more clear, or can be if you have good naming practices, what a Value Object is as compared to an array, again, particularly in type hints.
&lt;/div&gt;

&lt;div class=&quot;value-object-pro&quot;&gt;
    **Cleaner code, fewer errors**
    The Value Object is an abstraction.  One that allows us to supply a needed value, or at the very least a default one.  We don&#39;t need to run any isset checks or any boilerplate array checking, all that&#39;s taken care of for us.  Just take a look at the two example constructors below; one with an array and one with a Value Object.


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sourceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sourceName&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sourceName&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DataAccessCredentials&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sourceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSourceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


I don&#39;t know about you, but I know which one I&#39;d rather come across in calling code and
it isn&#39;t the one accepting an array.
&lt;/div&gt;

&lt;div class=&quot;value-object-pro&quot;&gt;
    **Immutability**
    For me this is a really big win.  The immutability of objects is very important to me.  When I&#39;m storing certain sets of data that could be used in a Value Object I probably don&#39;t want that data to be manipulated.  A good way to attain this immutability is to simply provide no setters to protected/private properties and only accept the values in the &lt;code&gt;__construct()&lt;/code&gt; of the object.  This ensures that every time we call on a value we&#39;re sure it is going to be the one we expect.  With arrays there is simply no assurance of this immutability.
&lt;/div&gt;

&lt;h3 id=&quot;wrapping-it-all-up&quot;&gt;wrapping it all up&lt;/h3&gt;

&lt;p&gt;I use an array when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The data set is varied or widely dynamic.&lt;/li&gt;
  &lt;li&gt;Use cases involve using those array functions.&lt;/li&gt;
  &lt;li&gt;Creating a lot of value sets and don’t want to take an object creation hit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll use an object when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data set is confined and relational to one another.&lt;/li&gt;
  &lt;li&gt;Probably won’t need to use array functions.&lt;/li&gt;
  &lt;li&gt;Likely not creating a large number of value sets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all Value Objects can add a lot of, well, value to your code base.  &lt;strong&gt;If&lt;/strong&gt; used properly.  They should not simply replace associative arrays.  With everything in software development there is a price and a reward.  It is up to you to determine if the rewards of the Value Object are worth the price.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title type="text">stop calling them getters and setters</title>
   <link href="http://blog.cspray.net/programming/2012/05/13/stop-calling-them-getters-setters.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-05-13T00:00:00-04:00</updated>
   <published>2012-05-13T00:00:00-04:00</published>
   <id>http://cspray.github.io/programming/2012/05/13/stop-calling-them-getters-setters</id>
   <content type="html">&lt;p&gt;I was having a talk with a fellow programmer and he said something to the effect that if
a class property is commonly used it might as well just be public because it is easier to
work with.  I rebutted that you should just use getters and setters and, of course, the discussion
turned toward the validity of getters and setters and whether they break encapsulation.  Having
had some time to chew on the information I’ve come to a couple conclusions, the foremost
being that we should stop calling them getters and setters and the second being that the use
of these mutator and accessor methods does not break encapsulation.&lt;/p&gt;

&lt;h3 id=&quot;why-getters-and-setters-is-bad-terminology&quot;&gt;why getters and setters is bad terminology&lt;/h3&gt;

&lt;p&gt;A lot of people think of, and use, getters and setters like the following class.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// you can replace the default values with values suitable for your requirements&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In fact, a lot of IDEs will go ahead and auto-generate this boilerplate code for you.  Of
course, I’m not a big fan of having my IDEs make code API decisions for me but the feature is
available and people do take advantage of it.  However, this is really bad code; effectively as
bad as if we had just declared the properties public to begin with.  Any calling code can
change the state of our class to anything they want just by using the available setter methods.
Chances are if your classes look like this you’re doing it wrong.&lt;/p&gt;

&lt;p&gt;More importantly I will stop using the getter/setter terminology exactly because the
common perception is similar to this code and this code is &lt;strong&gt;bad&lt;/strong&gt;.  It also isn’t good OOP
practice; you really shouldn’t be &lt;em&gt;setting&lt;/em&gt; the internal state of an object from calling
code…you should be mutating it.&lt;/p&gt;

&lt;h3 id=&quot;how-to-make-setter-code-good&quot;&gt;how to make “setter” code good?&lt;/h3&gt;

&lt;p&gt;First, let’s discuss encapsulation for a minute.  After all, its one of the primary
benefits of OOP and probably the hardest to achieve properly.  Encapsulation is not simply
locking the internal state of an object so that it can’t be manipulated.  That’s counter-productive
and probably the opposite of what you want.  You probably want to work with and do something
to the data stored by an object.  Encapsulation is providing a clear, concise, restricted
way to work on the data, or state, of a class.&lt;/p&gt;

&lt;p&gt;Clearly, the above code is not well encapsulated.  The methods may be clear, although I
would argue different, and concise they are most certainly not restricted.  I mean,
you could set the age to ‘gobbledy-gook’ and no one would be the wiser.  Some might “solve”
this problem by &lt;em&gt;only&lt;/em&gt; doing some kind of data check on the setters so that a weight can’t be
set to anything but a numerical data type or a name must be a string.  However, I don’t feel
that provides any real encapsulation and working with the class can be made better.&lt;/p&gt;

&lt;p&gt;The real way to encapsulate would be to determine how you expect the data to be used by
calling code.  Then implement methods that enable you to easily work with the data in the
expected way.  Let’s just dive right into fixing the above &lt;code&gt;Person&lt;/code&gt; class.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// you can replace the default values with values suitable for your requirements&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/[^A-Za-z]/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;preg_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// we assume here that you&amp;#39;re in the US and you store the height as inches&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;growTaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$inches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$inches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gainWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loseWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;growYearOlder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a much better encapsulated class.  The ways to work with the data are much more clear;
you can change a person’s name, have them grow taller, gain weight, lose weight
and become a year older…the normal things you’d expect a person to do or be capable of.  It
also lets our calling code know that this is the way we expect you to work with the class’s
internal state.&lt;/p&gt;

&lt;p&gt;More importantly we aren’t simply setting the internal state to whatever the calling code
thinks it should be.  We’re allowing a restricted set of &lt;em&gt;mutations&lt;/em&gt;, or state changes,
&lt;strong&gt;not&lt;/strong&gt; any ol’ arbitrary value.  We also have a much more expressive API, in my opinion,
with these new methods.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;conclusion&lt;/h3&gt;

&lt;p&gt;Terminology is not just some minor technicality.  The words that we choose to communicate
our ideas and thoughts are &lt;strong&gt;important&lt;/strong&gt;.  Thinking about them as getters and setters,
particularly setters, in the auto-IDE generated fashion leads to poor design.  Think about
how your classes state should be mutated and accessed; provide methods that facilitate those
changes in a clear, concise, restricted way.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">spaghetti triage</title>
   <link href="http://blog.cspray.net/programming/2012/03/13/spaghetti-triage.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-03-13T00:00:00-04:00</updated>
   <published>2012-03-13T00:00:00-04:00</published>
   <id>http://cspray.github.io/programming/2012/03/13/spaghetti-triage</id>
   <content type="html">&lt;p&gt;I was having lunch today with a fellow developer and the conversation included flawed web-based systems.
Systems in which there are fundamental flaws and there are numerous issues to fix.  Imagine a typical
spaghetti-fied, insecure mess.  I asked the guy what he would fix first.  His answer was, in principle,
the same as my answer…separate concerns, especially getting the “view” out of the business logic.&lt;/p&gt;

&lt;p&gt;This got me thinking.  Why did I choose that specific problem to fix first?  Why not fix common security
issues, like &lt;a href=&quot;http://en.wikipedia.org/wiki/Sql_injection&quot;&gt;SQL Injection&lt;/a&gt;,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Cross_site_scripting&quot;&gt;Cross-Site Scripting&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Remote_file_inclusion&quot;&gt;Remote File Inclusion&lt;/a&gt;?
In this blog post I will discuss why I would choose to separate the view from the business logic first
and give an example in code on how one might begin to separate the templating of HTML in a spaghettified
PHP application.&lt;/p&gt;

&lt;h3 id=&quot;why-separate-the-view-first&quot;&gt;why separate the view first?&lt;/h3&gt;

&lt;p&gt;That’s a really good question.  After all, when compared to security vulnerabilities that effect the
validity of your data separating the view seems insignificant in comparison.  However, we must keep
in mind that developers are human too and understanding business logic intermingled with the view, or
HTML, is insanely difficult and time consuming.  Seemingly everything becomes much longer and clunkier
than the business requirements need.  It is also extremely hard to determine how the different parts
of the view scattered through everything comes together to form the whole.  Ultimately this means the
view turns into something you despise.  When you want to work with the view the section you need is
impossible to find and when you don’t want to work with the view it is the only thing you see.&lt;/p&gt;

&lt;p&gt;We also have to take into account that securing an already established insecure system is going to be
very timely, difficult and error-prone.  Nobody really knows what’s going on in code spaghetti.  Was
the user input validated already?  What about formatting or sanitizing the data against some business
logic?  Knowing if you should be doing those things to a particular piece of data at any given time
is pretty important.  After all, &lt;a href=&quot;http://stackoverflow.com/questions/4171318/is-double-escaping-a-string-wrong&quot;&gt;data can become invalid if you escape too much&lt;/a&gt;
and attempting to format an already formatted value is a waste of resources.  Basically,
security is gonna be easier to implement in a cleanly separated system.&lt;/p&gt;

&lt;h3 id=&quot;how-would-you-separate-the-view&quot;&gt;how would you separate the view?&lt;/h3&gt;

&lt;p&gt;We have to understand that the answer here is not to go and integrate some advanced
templating system, like &lt;a href=&quot;http://www.smarty.net/&quot;&gt;Smarty&lt;/a&gt; or &lt;a href=&quot;http://twig.sensiolabs.org/&quot;&gt;Twig&lt;/a&gt;.
While these can be very powerful tools, and I understand why they might be used, I wouldn’t consider
them in this situation for 2 reasons.  The first, and most important, being that the last thing you
want to add to an already complex, overladen system is more complexity.  Integrating a third party
system into spaghetti is just not gonna work out well.  Whatever solution is implemented must be simple
and able to be easily absorbed, if you will, by the code base.  The change must be small, gradual and
ultimately would need to be made available globally.  I’m a strong proponent of working within the
local scope, however that isn’t what spaghetti is.  Whatever templating system you choose will, initially,
need to be made available to all the things.&lt;/p&gt;

&lt;p&gt;The second reason is more a personal preference as it is anything else but quite simply PHP is already
a templating system.  It works with HTML just fine thank you very much and it has &lt;a href=&quot;http://php.net/manual/en/control-structures.alternative-syntax.php&quot;&gt;an alternate syntax&lt;/a&gt;
that makes for easy addition of simple control and looping structures.  In 5.4 the language also introduces
the &lt;a href=&quot;http://php.net/ChangeLog-5.php&quot;&gt;always-on short echo tag feature&lt;/a&gt; where a variable can be echod by simply
wrapping it in &lt;code&gt;&amp;lt;?= ?&amp;gt;&lt;/code&gt;. PHP is already a templating system, there’s no need to add another
one on top of it in most situations.&lt;/p&gt;

&lt;p&gt;Looking at all the requirements I would likely start off with a single class and a single public static
method called &lt;code&gt;renderHtml($fileName, $data)&lt;/code&gt;.  Let’s take a look at actual code that might do this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$templateDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your/templates/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;array_walk_recursive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;htmlspecialchars&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;ob_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$templateDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ob_get_clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see there’s just not a whole lot that is involed here.  First we make sure all the data
in the array has been properly escaped to prevent XSS attacks.  Then we extract the data in the array
so that the template file has access to the variable data it needs.  Finally, start output buffering,
include the file and return whatever was generated.  Definitely nothing complex but it will allow you
to start separating the view from your business logic.  Once that has been completed other changes will
be much easier to implement.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I realize the short-tag echo feature, &lt;code&gt;&amp;lt;?= ?&amp;gt;&lt;/code&gt;, was available before 5.4.
However, the feature was only available if you had your PHP INI configuration set to allow short tags.
Since this feature was dependent on a configuration setting until 5.4 it may not be an option for your
environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;Well, there’s my reasonings for choosing separating business logic from the view as my first spaghetti
triage priority.  I included a simple code example on how I might start disentangling the HTML from the
rest of the PHP code as well.  What would you choose as your first triage priority and why?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">a community gone mad</title>
   <link href="http://blog.cspray.net/programming/2012/02/13/a-community-gone-mad.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-02-13T00:00:00-05:00</updated>
   <published>2012-02-13T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/02/13/a-community-gone-mad</id>
   <content type="html">&lt;p&gt;I mentioned in my &lt;a href=&quot;/programming/2012/02/10/going-from-solo-to-professional.html&quot;&gt;last post about going from amateur to professional developer&lt;/a&gt;
about getting involed in a community.  My community of choice is &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;
and some of the other &lt;a href=&quot;http://stackexchange.com/&quot;&gt;Stack Exchange&lt;/a&gt; sites.  I like the concept but &lt;em&gt;love&lt;/em&gt; the
execution.  It’s easy to come up with great ideas; to actually implement them in a way that works is
just awesome.&lt;/p&gt;

&lt;p&gt;With a site of Stack Overflow’s size and nature you &lt;a href=&quot;http://blog.stackoverflow.com/2012/01/the-trouble-with-popularity/&quot;&gt;have to moderate&lt;/a&gt; and sometimes
that means removing content that doesn’t fit on the site.  I totally agree with this.  I think keeping
the site pruned of worthless information is a good thing that helps make Stack Overflow better and
different than other Q&amp;amp;A or forum sites.  However, it can be taken too far or the guideline applied
too zealously and great content that should be used for the collective knowledge of the Internet is
gone.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://meta.stackoverflow.com/questions/122120/the-great-question-deletion-audit-of-2012&quot;&gt;This question on meta.stackoverflow&lt;/a&gt; suggests some popular or old posts that should
be deleted.  One of them includes a question that asks what is the most influential programming book
you’ve ever read.  It is a completely subjective question and doesn’t fit with Stack Overflow’s format.
The argument that the question-asker should have simply searched Amazon is a legitimate argument.  However,
it would be a tragedy if this question was deleted from Stack Overflow.&lt;/p&gt;

&lt;p&gt;This list is not just a Google or Amazon search.  It is a collective list of books and work that
the greatest programming community on the face of the planet has deemed to be the best.  Where else
are you going to find books where some of the greatest work in that field is plainly listed, in one place,
for anybody to peruse and look through?  It might not &lt;em&gt;fit&lt;/em&gt; but there’s enough knowledge for
me to overlook; this question should definitely stay.&lt;/p&gt;

&lt;p&gt;Not only that but there are quite a few books in this list that have drastically changed the quality
of my code.  Without this list I would have never known these books even existed.  I’d be willing to
bet there’s more people just like me who found great, influential books from this list.  To remove it
is just silly and serves no purpose but to take away from the Internet.&lt;/p&gt;

&lt;p&gt;I think it would be an absolute shame to lose this organized, commented, voted-on list of great material.
So, I took the best of that great material and &lt;a href=&quot;http://blog.cspray.net/my.so-archive/100-most-influential-programming-books.html&quot;&gt;created an archive of the 100 Most Influential Programming Books&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">going from solo to professional</title>
   <link href="http://blog.cspray.net/programming/2012/02/10/going-from-solo-to-professional.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-02-10T00:00:00-05:00</updated>
   <published>2012-02-10T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/02/10/going-from-solo-to-professional</id>
   <content type="html">&lt;p&gt;As I alluded to in my &lt;a href=&quot;/tech-and-society/2012/02/06/why-I-quit-school-what-it-would-take-to-stay.html&quot;&gt;previous post about leaving school and the state of the modern CIS program&lt;/a&gt;,
I recently got a job!  I’m really excited about this opportunity and wanted to take a look at it from a
different kind of light.  What I didn’t really talk about much in the previous post was what it took
for a solo amateur developer to join the ranks of the paid professionals.  Maybe you’re in the same
boat and want to become a developer in one of the most awesome industries ever.  Well, this is how &lt;strong&gt;I&lt;/strong&gt;
did it; maybe some of the stuff I learned can help you in your own journey.&lt;/p&gt;

&lt;h3 id=&quot;this-is-what-i-thinkhellip&quot;&gt;this is what I think…&lt;/h3&gt;

&lt;p&gt;There’s no way anyone can really know, short of just asking, &lt;em&gt;why&lt;/em&gt; they were hired by a particular
company.  I really have no idea why I was hired by my new employer.  I can take stabs at some reasons why,
but I really have no clue.  This is just some of the reasons I &lt;em&gt;think&lt;/em&gt; they noticed me out of
the masses and gave me a chance…even without a formal education.&lt;/p&gt;

&lt;h3 id=&quot;actually-writing-code&quot;&gt;actually writing code&lt;/h3&gt;

&lt;p&gt;This was definitely the key, essential ingredient in my career cake; the flour to your normal confectionary
delight.  Note, I didn’t say actually publishing an app, although I have this really killer idea I’m
working on and have some others in the pipeline.  I also think publishing your software is really important
and something I plan on doing.  But, I haven’t actually published any live application yet.  I can’t
rightly say that &lt;em&gt;publishing&lt;/em&gt; code as software got me my job.  But writing code sure did.&lt;/p&gt;

&lt;p&gt;I have several repositories on &lt;a href=&quot;http://www.github.com/cspray&quot;&gt;my github account&lt;/a&gt; and will likely have
several more being created in the coming months as my ideas start to become reality.  The important
thing though is that I’ve written, relatively, a decent amount of code.  Enough for a person to get a
feel for my coding style and problem solving process.  This is the important part; get enough of your code
that somebody can have a general idea for how you do things and get that code out into the open.&lt;/p&gt;

&lt;h3 id=&quot;documenting-my-code&quot;&gt;documenting my code&lt;/h3&gt;

&lt;p&gt;I make no secrets in &lt;a href=&quot;/programming/2012/01/02/comments-arent-evil.html&quot;&gt;my feelings on code comments&lt;/a&gt;
and take great pride in the consistency of my documentation.  I attempt to stick to explaining why
a piece of code exists instead of explaining what it does.  I would hope the code itself is descriptive
enough to tell you &lt;em&gt;what&lt;/em&gt; it is doing.  More often then not you look at code and you don’t know
&lt;em&gt;why&lt;/em&gt; it is doing the thing it is doing.  This is the part you can’t tell about the code by
reading it; this is the part you need to be putting into documentation.&lt;/p&gt;

&lt;p&gt;I see so much code that has seemingly no documentation whatsoever.  If you’re of the belief that documentation
should be kept to a bare minimum then at least give me a class and method doc-block.  Regardless of
how beautiful &lt;em&gt;you&lt;/em&gt; think your code is I may not be able to immediately grasp its elegance.
What I can grasp is English.  Give me just a little bit of that so I can know why your code exists
and shouldn’t be removed when it’s decided 6 months from now to refactor that part of the code base.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing-my-code&quot;&gt;unit testing my code&lt;/h3&gt;

&lt;p&gt;Oh man, I &lt;strong&gt;love&lt;/strong&gt; unit testing.  It’s just a blast.  I like the confirmation that my code works.
I was doing it before but just not automated and in a structured fashion.  You know what I mean.  Popping
a few &lt;code&gt;var_dump()&lt;/code&gt; throughout your code, refreshing the browser, making some changes, refreshing the
browser again.  Don’t lie; we’ve all done it.  Well, unit testing changes all that; no more inadvertently
dumping that entire object onto the production code because some &lt;strike&gt;bonehead&lt;/strike&gt;developer
didn’t catch that last &lt;code&gt;var_dump&lt;/code&gt; before pushing to production.&lt;/p&gt;

&lt;p&gt;If you’re a solo developer and you think your projects are too small for unit testing, well you’re wrong.
Go back and unit test your code, yea even if it already exists.  It tells the people that are looking
that you &lt;strong&gt;actually care&lt;/strong&gt;.  Having managed people in the real world, not in the programming
industry but in a pizzeria, I can tell you first hand that the hardest thing to find is a person who
cares enough to actually try.  If you care enough to actually try chances are you’re gonna figure it
out if you keep getting back up.  There’s nothing wrong with showing that you care and your passioniate
for a subject; in my opinion, as a solo developer unit-testing is a great way of doing this.&lt;/p&gt;

&lt;p&gt;Oh, and it makes your code way better.  There’s that too.&lt;/p&gt;

&lt;h3 id=&quot;reading-books&quot;&gt;reading books&lt;/h3&gt;

&lt;p&gt;Yea, that’s right.  You better work that noggin and read some books.  You can pretty much
&lt;a href=&quot;/my.so-archive/100-most-influential-programming-books.html&quot;&gt;start with this list&lt;/a&gt;
and when you’re finished you’ll have read some of the most influential and
timely works on software creation ever published.  For me there were 2 books in particular that really
stuck and had a drastic influence on how I go about writing code.  The first being &lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;amp;qid=1328925273&amp;amp;sr=8-1&quot;&gt;Clean Code&lt;/a&gt;
by Robert Martin and the second being &lt;a href=&quot;http://www.amazon.com/PHP-Action-Objects-Design-Agility/dp/1932394753/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1328925296&amp;amp;sr=1-1&quot;&gt;PHP In Action&lt;/a&gt; by
Dagfinn Reiersol, Marcus Baker, and Chris Shiflett.  Of course, you should read what is most relevant
to you but chances are if you read some of the books in the list you’ll learn quite a bit of useful information.&lt;/p&gt;

&lt;h3 id=&quot;get-involved-find-support&quot;&gt;get involved; find support&lt;/h3&gt;

&lt;p&gt;Chances are in this day and age there’s some kind of community online to support your development
needs.  I found mine at &lt;a href=&quot;http://www.stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt;, &lt;a href=&quot;http://programmers.stackexchange.com/&quot;&gt;Programmers&lt;/a&gt;,
&lt;a href=&quot;http://codereview.stackexchange.com/&quot;&gt;Code Review&lt;/a&gt; and &lt;a href=&quot;http://careers.stackoverflow.com/&quot;&gt;Careers&lt;/a&gt;.
Through these &lt;a href=&quot;http://stackexchange.com/&quot;&gt;Stack Exchange&lt;/a&gt; sites I’ve found all kinds of awesome reference material,
help on coding problems, a place to find honest, critical reviews of my work, and my employer.  As a solo
developer these tools are extremely invaluable and should be taken advantage of as much as possible;
if you’re willing to do the work it’s almost like your own little Stack Overflow University.&lt;/p&gt;

&lt;p&gt;Find some support in that community.  Doing this kind of thing on your own can be mentally challening.
How do you know if you’ve gotten it right?  How do you know if anything you’re doing even makes sense?
Find somebody that knows what they’re doing to provide support.  Fortunately, I found that support in the
Stack Overflow &lt;a href=&quot;http://chat.stackoverflow.com/rooms/11/php&quot;&gt;PHP chat room&lt;/a&gt;.  One user in
particular though, &lt;a href=&quot;http://stackoverflow.com/users/285578/edorian&quot;&gt;edorian&lt;/a&gt;, really
provided the kind of problem-solving help and motivation that a budding developer needs to get
past those rough spots.  Sometimes just knowing that somebody out there cares enough to help
you and is watching can really make you strive to put forth your best effort.  If you can
find your own mentor then definitely hold on to that as long as possible and learn
as much as you can from the person.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;It was certainly an unorthodox approach to getting a job: write a bunch of documented, unit-tested
code that never gets published, join a Q&amp;amp;A site, find some great support, and back it up with real-life
job experience in other industries.  Maybe perhaps not the best approach one could take but it still
got me to my destination none the less.&lt;/p&gt;

&lt;p&gt;Besides the things that I talk about here I believe the most important thing to possess is
&lt;a href=&quot;/programming/2012/01/06/how-to-be-great-at-x.html&quot;&gt;passion for the subject&lt;/a&gt;
.  I’m extremely passionate about programming; without this passion that drives me there’s no way I
do the things that I talk about in this post.  There’s no way I spend so much time over the past 2½
years to get to where I am.  If you’re passionate about what you’re doing and you’re willing to learn
you will be great at what you do.  If you’re passionate about programming and are flying solo then I
hope these bits of advice help get you to where you need to be.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">why I quit school and what it would take to stay</title>
   <link href="http://blog.cspray.net/tech-and-society/2012/02/06/why-I-quit-school-what-it-would-take-to-stay.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-02-06T00:00:00-05:00</updated>
   <published>2012-02-06T00:00:00-05:00</published>
   <id>http://cspray.github.io/tech-and-society/2012/02/06/why-I-quit-school-what-it-would-take-to-stay</id>
   <content type="html">&lt;p&gt;About three years ago I moved to the upstate New York area as a start to “rebooting” my life.  I
had entered the full-time work force after graduation and 10 years later, while the resume looked ok,
there was a huge void.  I was just kinda floundering at my job and going through the motions.  I knew
if I stayed where I was I would only continue to flounder.  A change was needed, so I moved.&lt;/p&gt;

&lt;p&gt;One of the many reasons I made this decision was a job with the &lt;a href=&quot;http://www.newskete.com&quot;&gt;Monks of New Skete&lt;/a&gt;.
Unfortunately in January of 2011 they were forced to lay me off due to the economy.  In their graciousness
the brothers decided to assist me in attending school and really pushed me to enroll in classes.  Determined
to become a web developer I searched for schools that I felt would teach me the right kind of information
to get a job as such.  I found the school and started attending classes.&lt;/p&gt;

&lt;p&gt;Recently the second semester of college started.  Soon after though I found myself facing a tough decision.
A company spotted my resume and gave me a phone interview, then another phone interview, then a live interview.
Then a &lt;strong&gt;formal job offer&lt;/strong&gt;.  A job doing the kind of work I was going to school for in
the first place.  Oh yea, also &lt;em&gt;twice as much money as I’ve ever made in my whole, 28-year long
life.&lt;/em&gt;  What do I do?  Take the job or stick with school and get my degree?&lt;/p&gt;

&lt;p&gt;It was a little disheartening how easy it was to come to the decision to quit school.&lt;/p&gt;

&lt;p&gt;Now I know I’ll get a few of you out there who are moaning right now, cursing at the young whipper-snapper
who just doesn’t know any better and should really stay in school and get a degree.  Before you get
too red in the face and run out of breath let me tell you some of the reasons why I decided to leave
the academic program and start gaining real-life work experience.&lt;/p&gt;

&lt;h3 id=&quot;outdated-andor-flawed-information&quot;&gt;outdated and/or flawed information&lt;/h3&gt;

&lt;p&gt;The best example I can show of this is my HTML class.  The professor mentioned &lt;a href=&quot;https://www.google.com/#sclient=psy-ab&amp;amp;hl=en&amp;amp;source=hp&amp;amp;q=browser+sniffing&amp;amp;pbx=1&amp;amp;oq=browser+sniffing&amp;amp;aq=f&amp;amp;aqi=g4&amp;amp;aql=&amp;amp;gs_sm=e&amp;amp;gs_upl=1703l4091l0l4361l16l11l0l0l0l0l946l2724l0.3.5-1.2l6l0&amp;amp;bav=on.2,or.r_gc.r_pw.r_cp.,cf.osb&amp;amp;fp=862141011cc102a&amp;amp;biw=1280&amp;amp;bih=729&quot;&gt;browser sniffing&lt;/a&gt;
as a means to detect the browser being used and create different pages to target the different browsers.
When I heard this uttered by an authority figure in a place of learning I had to do a double-take and make
sure I wasn’t really in some sort of nightmare.  Clearly by now the web development community has decided
&lt;a href=&quot;http://www.alistapart.com/articles/understandingprogressiveenhancement&quot;&gt;progressive enhancement&lt;/a&gt;
is the future of web development and the best means to provide rich content to capable devices.&lt;/p&gt;

&lt;p&gt;Now, I’m certainly aware that in certain cases detecting the browser agent may be necessary.  But to
teach this to a beginner level class that doesn’t know any better is damn near negligent.  That string is &lt;em&gt;arbitrary,
unsafe&lt;/em&gt; data that should not be trusted unless you know what you’re doing.  At the very least if you
are going to discuss information like this tell the whole story; that the data is coming from the user and
can be set to anything they want and you’re creating a user experience nightmare that we should be avoiding, not encouraging.&lt;/p&gt;

&lt;p&gt;Another rage-worthy moment is a &lt;a href=&quot;http://stackoverflow.com/questions/9121654/why-would-this-regex-return-an-error#comment11462449_9121654&quot;&gt;recent comment&lt;/a&gt;
I happened across on one of my favorite sites, &lt;a href=&quot;http://www.stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt;.
In it, the user commented that the head of the Computer Science department was teaching him how to parse
HTML with regex.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;This sounds incredibly, well, stupid.  I definitely do not agree with parsing HTML with regex and
certainly don’t believe that it is worthy of being taught as a module in any education system.  It is
incredibly frustrating to know this type of material is being taught by “higher learning”.&lt;/p&gt;

&lt;h3 id=&quot;niche-subjects-should-not-be-core-requirements&quot;&gt;niche subjects should not be core requirements&lt;/h3&gt;

&lt;p&gt;Part of my web development program included a course on &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Flash&quot;&gt;Flash&lt;/a&gt;,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Dreamweaver&quot;&gt;Dreamweaver&lt;/a&gt;, and &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Fireworks&quot;&gt;Fireworks&lt;/a&gt;.
I vehemently disagree that these subjects should be part of the core
requirements for a degree.  Although Flash is still prevalent on the web, it is &lt;a href=&quot;http://www.forbes.com/sites/josephhargett/2011/11/09/steve-jobs-vindicated-adobe-reportedly-abandoning-mobile-flash-plug-in/&quot;&gt;also dying&lt;/a&gt;
and I have very strong feelings on developing with Flash; to make a long story short I’m not gonna
develop in Flash.  I don’t like the technology and everytime I require its use for a website I cry a little inside.
I’m not gonna do something to others that I know makes me feel that way.&lt;/p&gt;

&lt;p&gt;An entire semester of using a WYSIWYG editor would be akin to some kind of sick twisted game; not
an educational lesson I would take with me the rest of my life.  I stopped using these types of HTML-producing
monstrosities shortly after Geocities.  I have no intention of going back to using them no matter how
advanced they may have gotten.  I can type just fine, thank you very much, and wouldn’t work for any
company that forced me to use an editor of this type to make web applications.&lt;/p&gt;

&lt;p&gt;So far, &amp;amp;frac23; of the class would be completely useless to me and not something that I would use
in my actual career plans.  Why should I have this hoisted onto my calendar and my wallet?  Classes
like these should be turned into electives; if you’re interested in pursuing Flash development get into
the class, otherwise give me the opportunity to learn something I may use in my career.  You may also
find that the money for that class could be better spent elsewhere as the enrollment drops off because
that isn’t where the demand and the future is.  It’s where the past is.&lt;/p&gt;

&lt;h3 id=&quot;teach-things-that-you-only-give-lip-service-to&quot;&gt;teach things that you only give lip service to&lt;/h3&gt;

&lt;p&gt;In each of my classes I would hear faint echoes of words like “version control” and “testing” but
they never stuck around long and didn’t warrant any intellectual conversation.  These are
crucial aspects of being a professional developer.  These topics certainly are extremely important in
real-life, this-is-how-you-actually-do-it world.  Don’t just mention them in passing; &lt;em&gt;teach&lt;/em&gt;
me about them.&lt;/p&gt;

&lt;p&gt;There are a couple things that I feel are ridiculously important to creating &lt;strong&gt;sustainable, quality&lt;/strong&gt;
software.  These things should absolutely be taught in every college degree program that intends to produce
software engineers/developers.&lt;/p&gt;

&lt;h4 id=&quot;version-control&quot;&gt;version control&lt;/h4&gt;

&lt;p&gt;Version control is so extremely important and necessary in application development that it should be a
101, first-semester course.  The great thing about version control is that it transcends programming, you
can really use it for all kinds of things.  But, the important part here is that you will never create
any kind of professional software that doesn’t use version control of some kind.  This subject absolutely
must be taught.  If you are past the first-semester of a degree pursuing some kind of software development
and you haven’t commited to a repository yet &lt;a href=&quot;http://git-scm.com/&quot;&gt;please go do so now&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;unit-testing&quot;&gt;unit testing&lt;/h4&gt;

&lt;p&gt;Having recently gotten into unit testing I’m really enjoying it.  I’m also seeing how testing is a
requirement for robust, maintainable software.  If you don’t have unit tests for your code it will
wind up turning into a mess.  Unit testing is an art in and of itself; an art within the art of programming.
Knowing how to unit test properly and what your unit tests should be accomplishing would be tremendously
valuable information.  Information that, I’d be willing to bet, my future employers would love that I had.&lt;/p&gt;

&lt;h4 id=&quot;documenting-naming-conventions-and-formatting&quot;&gt;documenting, naming conventions and formatting&lt;/h4&gt;

&lt;p&gt;I’ve seen some pretty awful code submissions.  No formatting, erratic spacing, nondescriptive variables,
and seemingly no consistency in the code base.  Pretty awful stuff to look at really.  Ultimately this is
highly important stuff; how easy your code is to &lt;em&gt;read after it’s written&lt;/em&gt; is gonna play a big
role in &lt;em&gt;how easy that code is to maintain&lt;/em&gt;.  Software that can’t be read can’t be maintained; software that
can’t be maintained can’t be sustained.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;Some of this may sound like a rant; because maybe it kind of is.  I’m frustrated.  Honestly, I hope
there are others out there who are just as frustrated.  That our time, money and hard work is being
wasted on wrong, outdated or unuseful information.&lt;/p&gt;

&lt;p&gt;The real problem though is that ultimately information being taught like this is bad for our future.
We’re not preparing our young people to handle the problems of tomorrow.  The techniques and practices,
particularly in regards to programming, being taught in schools just don’t match up with what I feel
is the direction the software world is taking.&lt;/p&gt;

&lt;p&gt;Perhaps in my journey through life I’ll come across a time when I feel school is worth the time and effort.
However, how does one find the right school?  How do you discover what is being taught before it is taught to
you?  How can you effectively gauge whether the school will bring you value until you’ve already expended
the time and energy?&lt;/p&gt;

&lt;p&gt;It is unfortunate that these problems must plague society today.  I sincerely hope that the American
education system is able to rise from the muck it has sunk down into.  Education is highly important to
a society’s health and well-being.  We must get it right, or so many things will go wrong.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">DI and global state</title>
   <link href="http://blog.cspray.net/programming/2012/01/29/DI-and-global-state.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-01-29T00:00:00-05:00</updated>
   <published>2012-01-29T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/01/29/DI-and-global-state</id>
   <content type="html">&lt;p&gt;In a previous post I talked about &lt;a href=&quot;/programming/2012/01/24/why-you-should-use-DI.html&quot;&gt;
why you should use Dependency Injection&lt;/a&gt;. It garnered a little bit of attention, getting
&lt;a href=&quot;http://www.reddit.com/r/PHP/comments/owcaw/why_you_should_use_dependency_injection/&quot;&gt;some votes on reddit/r/PHP&lt;/a&gt;
and also showing up &lt;a href=&quot;http://phpdeveloper.org/news/17457&quot;&gt;on phpdeveloper.org&lt;/a&gt;.
With the attention came some criticism, justly served, particularly in regards to a lack of code examples.
To help better explain each of the three aspects of DI I discussed in the previous article I’ll be going
over each more thoroughly and with those code examples requested. I’ll be going through each point
one at a time as the explanations will likely be of some length compared to the original post.&lt;/p&gt;

&lt;p&gt;I decided to start off first with something that I feel strongly about. Global state and
&lt;a href=&quot;http://sourcemaking.com/design_patterns/singleton&quot;&gt;Singletons&lt;/a&gt;. At one point my code was
riddled with global state and Singletons.  Then I started unit testing. Let me tell ya, global state
&lt;em&gt;sucks&lt;/em&gt;. And yea, Singleton === global state.&lt;/p&gt;

&lt;p&gt;In the traditional Singleton pattern you retrieve the instance through a &lt;code&gt;Class::getInstance()&lt;/code&gt;
static method. This is just a fancy way of encapsulating global state. Whatever is returned from this
method is available to &lt;em&gt;all the things&lt;/em&gt;. If you think about your application can you really
think of something that makes sense for &lt;strong&gt;everything&lt;/strong&gt; to have the ability to touch?
I know I have a hard time rationalizing something like that at this point.&lt;/p&gt;

&lt;h3 id=&quot;meet-the-villains&quot;&gt;meet the villains&lt;/h3&gt;

&lt;p&gt;First, let’s take a look at our nasty ol’ Singleton.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NastyOlSingleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;my_database&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysqli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you have it. Your traditional, boring, just-global-state-encapsulating Singleton; this one
returning a &lt;code&gt;mysqli&lt;/code&gt; database connection. I’m sure you’ve written code like this before, I
know I have.&lt;/p&gt;

&lt;p&gt;Now, let’s take a look at a simple class skeleton that might map to a database table for users.
We aren’t gonna actually write out any SQL or anything like that; just an example of where our
&lt;code&gt;NastyOlSingleton&lt;/code&gt; might be used.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserTable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NastyOlSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createNewUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findUserById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you have it, some poor victim being abused by &lt;code&gt;NastyOlSingleton&lt;/code&gt;. Important to
note, after you weep for the innocent, is that we are hiding our dependency. The average onlooker
would not be aware that beneath this seemingly benign code lies the requirement for a database connection!
&lt;a href=&quot;http://stackoverflow.com/users/208809/gordon&quot;&gt;Gordon&lt;/a&gt;, a Stack Overflow member, said,
“Applications with no depedencies don’t exist. I just want them to be manageable and explicit.”&lt;/p&gt;

&lt;p&gt;I would say that our dependencies are neither manageable or explicit.&lt;/p&gt;

&lt;h3 id=&quot;the-problem-with-this-approach&quot;&gt;the problem with this approach&lt;/h3&gt;

&lt;p&gt;We’ve now tied our application to the concreate implementation of &lt;code&gt;NastyOlSingleton&lt;/code&gt;.
Further more, our application architecture is setup so that anything can gain access to the database.
Since the object is available everywhere it won’t hurt if we just use it in the view just this one time
because we’re behind on a deadline. It doesn’t matter that objects everywhere in our application are
using our database all willy-nilly with no regards to the sanctity of our data.  Since we’re so
awesome we also don’t need to unit test so don’t worry about the problems static makes in that department.&lt;/p&gt;

&lt;p&gt;As you can see, global state isn’t friendly. It can lead to bad code and, even worse, &lt;strong&gt;bad
design decisions&lt;/strong&gt;. Is all code that uses Singleton and global state &lt;em&gt;bad&lt;/em&gt;?  No, but
I would venture that it leads to easier bad design decisions then solutions where the problem was thought
through in such a manner that didn’t require global state.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;the solution&lt;/h3&gt;

&lt;p&gt;For this particular problem there is an easy, elegant solution that utilizes the &lt;a href=&quot;http://sourcemaking.com/design_patterns/factory_method&quot;&gt;Factory design pattern&lt;/a&gt;
and, you guessed it, Dependency Injection.  Whenever I see somebody utilizing
a Singleton I think to myself that a Factory should probably be responsible for producing that object.
The calling code shouldn’t really care at all if the object being used is an instance shared among other
objects or one created just for its own special use. Let the Factory be responsible for dictating whether
or not an object instance is shared. Then remove all those crappy &lt;code&gt;static&lt;/code&gt; methods and
properties from your classes.&lt;/p&gt;

&lt;p&gt;Let’s take a look at some more code. This time a Factory that will produce objects like &lt;code&gt;UserTable&lt;/code&gt;.
Note that in the constructor we’re explicitly stating, “Hey, guys, I need a database connection over here.”&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DbTableFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msyqli&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And of course we should change up our &lt;code&gt;UserTable&lt;/code&gt; class to match up with our new and improved
Dependecy Injection.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserTable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mysqli&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createNewUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findUserById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What about &lt;code&gt;NastyOlSingleton&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/nuclear_explosion.jpg&quot; title=&quot;Destroy the Singleton.  Perhaps even with a fire.&quot; alt=&quot;Destroy the Singleton.  Perhaps even with a fire.&quot; class=&quot;center-block&quot; width=&quot;400&quot; height=&quot;340&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wait-what-are-we-really-gaining-here&quot;&gt;wait, what are we really gaining here?&lt;/h3&gt;

&lt;p&gt;As you can see the &lt;code&gt;UserTable&lt;/code&gt; hasn’t really changed all that much on the inside.  Its
still calling the same methods in the same ways. But, it has that very, very important constructor
dependency; effectively communicating that this object needs a &lt;code&gt;mysqli&lt;/code&gt; connection or it
is useless. This leaves you with a much more flexible solution, you can create that database connection
however you want. Perhaps you have another Factory taking care of actually creating the connection.&lt;/p&gt;

&lt;p&gt;Most importantly though you’re no longer exposing the database to all the things.  Only the objects
that truly need to access the database have the ability to do so.  When you start seeing weird data
showing up in queries you’ll thank yourself that you have a limited number of objects that can be
responsible. Oh, and as a little bonus you have more control over how your database connection is
handled and the side effects stemming from its use. For example, you might want to throw exceptions
instead of triggering an error for a given connection.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;Ultimately the code examples here are pretty simple because the basic idea here is pretty simple.
Global state, and by extension Singleton, is bad. Its bad for a lot of different reasons; leads to
entangling of concerns, makes easier to choose bad design decisions, and makes unit testing a nightmare.
The best way to avoid global state and that NastyOlSingleton is to use Dependency Injection and build
your application so you’re more inclined to make &lt;em&gt;good&lt;/em&gt; design decisions as compared to bad
ones.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/programming/2012/01/24/why-you-should-use-DI.html&quot;&gt;Return to why you should use DI&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">why you should use DI</title>
   <link href="http://blog.cspray.net/programming/2012/01/24/why-you-should-use-DI.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-01-24T00:00:00-05:00</updated>
   <published>2012-01-24T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/01/24/why-you-should-use-DI</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; is all the rage
these days, particularly when you slap the word ‘Container’ in there somewhere.  Dependency Injection
is just a fancy term for passing dependencies to the object needing them instead of letting the object
create its own.  Hopefully, you’ve watched this &lt;a href=&quot;http://googledata.org/google-testing/clean-code-talks-dependency-injection/&quot;&gt;great Google Clean Code talk about dependency injection&lt;/a&gt; &lt;a href=&quot;http://misko.hevery.com/&quot;&gt;Misko Hevery&lt;/a&gt; where he talks about why you should ask for things instead of looking for them.&lt;/p&gt;

&lt;p&gt;I’m gonna talk about some reasons to use DI beyond just those presented in the video.  Maybe you
don’t unit test, although you really should, so the better testability argument doesn’t really hold
weight for you.  Maybe you’re skeptical about the “extra work” that is needed with injecting depedencies
instead of just creating them.  Maybe you just flat-out don’t see the benefit.  Well, I’m here to show
you how &lt;strong&gt;I’ve&lt;/strong&gt; benefited and, hopefully, convince you that you can reap these same rewards
by asking for things instead of looking for them.&lt;/p&gt;

&lt;h3 id=&quot;helps-global-state&quot;&gt;helps in the battle against global state&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?GlobalVariablesAreBad&quot;&gt;Global variables are bad&lt;/a&gt;.  If you are
of the belief that global variables &lt;em&gt;aren’t&lt;/em&gt; bad, well…I disagree with you.  Global state can
lead to spaghetti code and is often used as a crutch for when the real problem isn’t solved.  If something
is in the global state there better be a &lt;em&gt;really&lt;/em&gt; good reason; most reasons aren’t good.  By
using dependency injection we are plainly stating what we need to use and then use those dependencies
within the scope of the class; not the scope of all the things.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Interested in learning more about how DI can win the good fight against global state?
Check out a follow-up to this article, &lt;a href=&quot;/programming/2012/01/29/DI-and-global-state.html&quot;&gt;DI and global state&lt;/a&gt;,
for a more thorough explanation and code samples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;helps-your-design&quot;&gt;it helps your design&lt;/h3&gt;

&lt;p&gt;If dependency injection doesn’t make you really think about and evaluate your code you aren’t doing
it right.  Using DI isn’t just about moving objects created in your constructor to objects passed as
arguments to the constructor.  What I’m trying to say is, if your class is injecting a lot of different
objects you should be treating this as a big, flashing warning sign.  It’s easier to rationalize a problem
not being there, or even just missing it completely, if there are no consequences for your actions.  In a
way DI adds a consequence to your actions; you can’t simply create an object with dependencies whenever
you feel like it.  Instead you have to think about how the object is being used and what the object
needs to complete its responsibility.&lt;/p&gt;

&lt;p&gt;Dependency Injection doesn’t make bad code smell, it makes bad code &lt;em&gt;reek&lt;/em&gt;.  Don’t ignore
the putrid odor wafting about your IDE.  Find the source of the stench and remove it or fix it.  Ignoring
this stench is akin to wallowing in garbage all day and believing that a swipe of deodorant is sufficient.
In reality you need a shower and you actually smell quite bad.&lt;/p&gt;

&lt;h3 id=&quot;helps-srp&quot;&gt;especially single responsibility&lt;/h3&gt;

&lt;p&gt;I’ve found that DI really helps out with a core tenant of good object-oriented design,
the &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;.
I firmly believe that SRP is one of the most fundamental and most crucial aspects of a good object-oriented
solution.  This is the only way to attain modularity.  If your classes don’t encapsulate and solve a single
responsibility, and only a single responsiblity, you are ultimately entangling problems.  This entangling of
problems is what leads to applications not being sustainable in the market because they aren’t &lt;em&gt;maintainable&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;Dependency Injection isn’t just a fancy fad to prove your programming hipness.  The strategy is
intended to solve a problem and, I think, impact the way you write code and design your applications.
It isn’t enough to just blindly use a technique or pattern.  You have to understand &lt;em&gt;why&lt;/em&gt; you
are using that technique and what kind of benefits you’re supposed to gain from their use.  Only then
can the technique be used effectively to solve problems and grow as a developer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">you better pay attention to details</title>
   <link href="http://blog.cspray.net/programming/2012/01/21/you-better-pay-attention-to-details.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-01-21T00:00:00-05:00</updated>
   <published>2012-01-21T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/01/21/you-better-pay-attention-to-details</id>
   <content type="html">&lt;p&gt;I like tea.  Particularly sweet tea.  When its cold give it to me iced; if its hot I’ll take it
steaming with a little bit of milk.  When its cold I tend to drink a lot of tea and I go through a
lot of tea bags.  Normally you wouldn’t expect to care too much about the &lt;em&gt;design&lt;/em&gt; of a tea bag.
I mean, it is a little pouch of tea leaves that allows water to come in and out but keeps the tea leaves
in the pouch, with no leaves escaping.  There should probably be a string with some kind of handle to easily
retrieve the tea bag from hot water.  That about sums up the totality of a good tea bag.  So, when you
encounter a horrendously designed tea bag it really stands out.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I apologize for the quality of the photo.  I have a not-so-good phone with a not-so-good camera.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;meet-the-horrendous-design&quot;&gt;meet the horrendous design&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/lipton-tea-bag-design.jpg&quot; class=&quot;pull-left soft-margin-right&quot; alt=&quot;Lipton&#39;s horrible tea-bag design&quot; width=&quot;275&quot; height=&quot;270&quot; /&gt;
Ah, good ol’ Lipton.  If you drink tea in America you have to know this company.  They’re almost synonymous
with the stuff.  At first glance this product &lt;em&gt;appears&lt;/em&gt; to take care of all the things required
in a good tea bag.  There’s a pouch there with some tea leaves and a string with a handle. But, look again.
At the top where they &lt;strong&gt;taped&lt;/strong&gt; the handle to the tea bag.  That one crucial aspect
of the tea bag totally ruins everything else.  Why?  Because you have to use the most delicate touch
to remove the handle from the tea bag; otherwise the bag splits open and you risk tea leaves infiltrating
your water.  Tea leaves entering the water is the most egregious of tea-related offenses and is, quite
frankly, unacceptable.&lt;/p&gt;

&lt;h3 id=&quot;how-did-this-happen&quot;&gt;how did this happen?&lt;/h3&gt;

&lt;p&gt;My question isn’t why, I don’t really care why they decided to go with this design.  Maybe they
thought it was the best way to package the tea bag for individual sale, as I did purchase the offending
item at a service station.  Whatever the reason &lt;em&gt;why&lt;/em&gt; I’m far more interested in the &lt;em&gt;how&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Did they not &lt;a href=&quot;http://www.joelonsoftware.com/items/2004/04/16.html&quot;&gt;“eat their own dog food”&lt;/a&gt; at all?
It isn’t like the tea bag splitting is a rare or uncommon occurrence, it happens quite frequently.
Frequently enough that &lt;strong&gt;I will no longer purchase Lipton products.&lt;/strong&gt; Why would I waste
my money on a quarter of my tea bags getting thrown away unused?  Highly wasteful and inefficient.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;In conclusion you better damn well eat your dog food. Actually &lt;strong&gt;use&lt;/strong&gt; the stuff that
you create and produce.  That applies to far more than just programming.  Use it.  Discover the weaknesses.
Fix the weaknesses.  Have a good product.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">dog training your code</title>
   <link href="http://blog.cspray.net/programming/2012/01/17/dog-training-your-code.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-01-17T00:00:00-05:00</updated>
   <published>2012-01-17T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/01/17/dog-training-your-code</id>
   <content type="html">&lt;p&gt;When I worked with the &lt;a href=&quot;http://www.newskete.org/&quot;&gt;Monks of New Skete&lt;/a&gt; I got a first-hand
opportunity to learn about dog training from world-reknowned dog trainers.  I thoroughly enjoyed the
chance to learn more about communicating with our canine friends and have taken on dog training as a
more serious hobby.  It has been a wonderful experience being able to truly connect with a dog, who
really just wants to play and have a good time.  But, dog training is serious fun business.  It isn’t
just obedience commands, no more than programming is just writing code.  I believe that it is composed
of the communication, discipline, love and respect between canine and man in its entirety.  How you
go about living your life with your dog is dog training; obedience is simply one aspect of that life
style.&lt;/p&gt;

&lt;p&gt;I believe that dogs can teach us a lot about ourselves and that dog training principles can be
applied in a variety of situations, including programming.  Dog training is not a skill naturally gifted,
it is one that is learned and practiced.  You either commit yourself to learning and studying the
appropriate ways to communicate with a dog or you don’t.  You either commit yourself to learning and
studying the appropriate ways to &lt;em&gt;program&lt;/em&gt; or you don’t.  But, how can dog training apply to
writing computer software?&lt;/p&gt;

&lt;h3 id=&quot;consistency&quot;&gt;consistency&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/mercedes_portrait.JPG&quot; class=&quot;pull-right soft-margin-left&quot; alt=&quot;Mercedes, a New Skete German Shepherd&quot; title=&quot;Mercedes was a German Shepherd I helped train for a time.&quot; width=&quot;250&quot; height=&quot;320&quot; /&gt;
Consistency is one of the most important aspects of dog training, particularly obedience training.
Understanding how canines communicate to get the best results you must be consistent with your communication.
If you consistently tell your dog to “sit” three times before they sit and you then reward your dog
you will soon discover that you must tell your dog to sit three times &lt;em&gt;every single time&lt;/em&gt;.  Why?
Because that’s what &lt;strong&gt;you&lt;/strong&gt; taught your dog to do!&lt;/p&gt;

&lt;p&gt;I believe that to make a maintainable program one must be consistent with your coding style, documentation,
and the overall readability.  Consistent code is, eventually, easier to read.  Easier to read code is
easier to maintain code and that’s the whole point of higher-level languages.  To make it easier to
read and understand code.  If you’ve ever tried to read a body of work that had inconsistent formatting
you know full well how important this is.&lt;/p&gt;

&lt;h3 id=&quot;patience&quot;&gt;patience&lt;/h3&gt;

&lt;p&gt;Patience is the most important thing in dog training.  If you are not patient with the dog and fly-off
the handle at the slightest provocation you are gonna suck at dog training.  Dogs are often singular
in their mindset and, for example, may decide that you should know about something and they’re gonna
bark until they’re sure you know.  This can be a frustrating habit to train out of a dog; first you
must have the patience to understand &lt;em&gt;what and why&lt;/em&gt; the dog is trying to communicate to you.
Then you must have the patience to actually carry through with your training plan.  These are very
trying tasks, particularly when so much of what you do is crucial to get the results that you want;
your body language, the tone of your voice, and the loudness of your voice are just some of the very
crucial aspects of communicating with a dog.&lt;/p&gt;

&lt;p&gt;If you don’t understand how patience is important to programming then for goodness sakes close this
browser right now and go code something!  I was going back through SprayFire
unit tests and doing some refactoring.  Instead of just assuring that the expected error occurred I
decided to also check that the expected error message occurred.  I soon discovered a flaw in an algorithm;
it still produced passing unit test results but was following the wrong path of execution.  I fixed
the flaw and now the code is a little bit better.  The patience to write those unit tests, instead of
just being happy with what I had, and the patience to go fix the flaw is what made the code better.&lt;/p&gt;

&lt;h3 id=&quot;technique&quot;&gt;technique&lt;/h3&gt;

&lt;p&gt;Technique is critically important to proper dog training.  And there can be a lot of different,
valid, techniques to achieve the appropriate results with your pooch.  Not all techniques are good
ones though and some techniques in the wrong hands can be deadly.  Proper technique can be the difference
in feeling like you must “fight” with the dog the entire time and the dog &lt;em&gt;wanting&lt;/em&gt; to obey.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mercedes_garden.jpg&quot; class=&quot;center-block&quot; alt=&quot;Mercedes, a New Skete German Shepherd&quot; title=&quot;Here she is, enjoying the beautiful weather!&quot; width=&quot;451&quot; height=&quot;337&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the programming world this would be design patterns.  That’s really all design patterns are, a
technique to solve a problem.  Proper use of the technique makes the code simple and it obeys your
every whim.  Misuse of the technique and your code is rendered a useless, cruddy mess.  Not all techniques
are appropriate for a given situation and much of becoming a master of your craft is determining what
techniques should be applied when.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;This post didn’t really start out with a purpose; I just wanted to talk about dogs and put some
pictures of Mercedes up.  I guess I’ll leave you with the thought that the best kind of learning is
when you can apply it to more than just the situation at hand and really change the way you do things.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">how to be great at $x</title>
   <link href="http://blog.cspray.net/programming/2012/01/06/how-to-be-great-at-x.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-01-06T00:00:00-05:00</updated>
   <published>2012-01-06T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/01/06/how-to-be-great-at-x</id>
   <content type="html">&lt;p&gt;I was sitting in the &lt;a href=&quot;http://chat.stackexchange.com/rooms/1240/graphic-design-corner&quot;&gt;Graphic Design Corner&lt;/a&gt; chat room over at &lt;a href=&quot;http://chat.stackexchange.com/&quot;&gt;chat.stackexchange.com&lt;/a&gt;
with Dyana, my fiancé, last night where we talked with a professional graphic designer.  He said something
that I had heard before, in fact something I had heard quite a bit from a variety of sources.  Here&#39;s what
he said:

&lt;blockquote&gt;
&lt;div&gt;&lt;a href=&quot;http://graphicdesign.stackexchange.com/users/1286/alan-gilbertson&quot;&gt;Alan Gilbertson&lt;/a&gt; said:&lt;/div&gt;
&lt;p&gt;A passion for the subject is the most important prerequisite, because that&#39;s what motivates you to become really, really good, and will push you to exceed your own standards all the time. That&#39;s how great designers happen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you&#39;d like, you can read over the &lt;a href=&quot;http://chat.stackexchange.com/transcript/message/2911100#2911100&quot;&gt;entire
transcript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think that Alan&#39;s quote is absolutely great and you could replace the word &lt;em&gt;designers&lt;/em&gt; with just
about any career or profession of your choice.  It certainly applies to programming; even the great
&lt;a href=&quot;http://stackexchange.com/users/11683&quot;&gt;Jon Skeet&lt;/a&gt; answered a question on &lt;a href=&quot;http://programmers.stackexchange.com/&quot;&gt;programmers.stackexchange&lt;/a&gt;
that &lt;a href=&quot;http://programmers.stackexchange.com/a/33817/28038&quot;&gt;passion can be an indicator of a good programmer.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Passion in and of itself is not what makes you great, though.  Rather, it is what that passion drives you to do.
I consider myself a passionate programmer.  This doesn&#39;t mean that I&#39;m just passionate about writing code, though.  I&#39;m
passionate about &lt;em&gt;programming&lt;/em&gt;; documenting code, writing unit tests, planning an application&#39;s groundwork and architecture,
ensuring my coding standards are consistently implemented, having wiki and man page documents complete and
correct, tracking my issues and completing them, garnering advice from other developers, submitting my code
to code reviews and making the user experience the best possible.  I&#39;m passionate about &lt;strong&gt;all&lt;/strong&gt; of
these things, not just the fun bits.  Its important to realize that passion isn&#39;t just about having fun, but instead a force that drives you to be better.&lt;/p&gt;

&lt;h3&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;I will leave you with an anecdote I heard on the radio one day.&lt;/p&gt;

&lt;p&gt;A pro-golfer and his buddy were at the driving range hitting some golf balls.  The buddy was watching this pro-golfer hit beautiful, straight
shots that landed perfectly on the fairway everytime.&lt;/p&gt;
&lt;p&gt;The buddy said, &quot;I would do anything to have your swing.&quot;&lt;/p&gt;
&lt;p&gt;The golfer turned around and said, &quot;No, you wouldn&#39;t.  You wouldn&#39;t come to the range every day and hit 200 balls,
then hit 200 more.  You wouldn&#39;t practice your swing until the blisters on your hands bleed.  You wouldn&#39;t do what
needs to be done to get my swing because you would have done it already.&quot;&lt;/p&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">SprayFire and MVC design pattern</title>
   <link href="http://blog.cspray.net/programming/2012/01/03/sprayfire-and-mvc-design-pattern.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-01-03T00:00:00-05:00</updated>
   <published>2012-01-03T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/01/03/sprayfire-and-mvc-design-pattern</id>
   <content type="html">&lt;p&gt;MVC must be one of the most over-used acronyms in the PHP framework community.  In SprayFire docs
and source code I’ve made a concerted effort to avoid use of the term MVC, except where appropriate.  Too
many people have their preconceived notions on how this design pattern should work and often anything that
diverges from the traditional implementation is treated as some form of abomination, a code pariah to be
dumped as soon as possible.  Reading this article, and the other articles talking about SprayFire’s interpretation of
the pattern, I ask that you open your mind.  Drop your preconceived notions.  There is nothing wrong with new
ideas, even if you don’t agree with them.  If an idea winds up not working, it won’t survive.  If it does wind
up working it might just make things better.  To not even consider the idea, I believe, would be folly.&lt;/p&gt;

&lt;h3 id=&quot;web-mvc-is-not-desktop-mvc&quot;&gt;web MVC is &lt;strong&gt;not&lt;/strong&gt; desktop MVC&lt;/h3&gt;

&lt;p&gt;The first thing to do is get rid of this silly notion that for some reason a design pattern for
desktops must be implemented the exact same way on the web.  Why?  They are two completey different ways
of running software.  Desktop software does not equal web software, regardless of how close the two have
appeared to merge to the user.  To the &lt;em&gt;developer&lt;/em&gt; many of the technologies used for web development have
been around for years, it is simply the way in which we are using them that has changed.  Remember, MVC
is a &lt;em&gt;design&lt;/em&gt; pattern, free to be changed and iterpreted differently.  It is not a concrete set-in-stone
checklist for writing quality software.&lt;/p&gt;

&lt;h3 id=&quot;mvc-the-right-kind-does-work-on-the-web&quot;&gt;MVC, the right kind, does work on the web&lt;/h3&gt;

&lt;p&gt;You hear it all the time.  MVC doesn’t work on the web.  Sure, your attempt to sledge hammer a desktop
design pattern onto the web doesn’t work.  That doesn’t mean MVC on the web is a bad idea.  MVC is simply
a way to separate the concerns of your application.  This is a &lt;strong&gt;good&lt;/strong&gt; thing.  That’s the end
goal; to separate the responsibilities of your application in such a way that it is easily maintained, portable and
modular.  If you accomplish these things, with clean, unit-tested code, does it really matter if your application’s
interpretation of MVC is unorthodox?  I think no.&lt;/p&gt;

&lt;h3 id=&quot;model-is-your-application&quot;&gt;Model is your application&lt;/h3&gt;

&lt;p&gt;The Model is not just an object to make querying a database easier.  It isn’t even an object or single
class at all.  Think of the Model as a layer of your app that is responsible for the &lt;em&gt;real life problem&lt;/em&gt;
you are attempting to solve.  Maybe your app is complicated and you need multiple Model layers to accomplish all
of the different functionality.  But, ultimately the Model makes use of a variety of objects related to data
persistence, validation, and whatever else your app needs to provide the appropriate data.  Ultimately the
Model should be able to exist entirely independent of the View and Controller.&lt;/p&gt;

&lt;h3 id=&quot;view-is-really-responder&quot;&gt;View is really Responder&lt;/h3&gt;

&lt;p&gt;I’ve never much cared for the name of the middle initial in MVC, at least not in the context of web apps.  It
simply doesn’t make much sense.  We are not sending a Graphical User-Interface to the user.  We are sending, ultimately, a
string of text to the user.  The browser, or a scripting language in that browser, then interprets the text
into a fancy display.  On the backend we shouldn’t think of what we are sending back to a user’s request as a
graphic view, because it &lt;strong&gt;isn’t&lt;/strong&gt;.  Even if you’re of the philosophy that HTML ultimately results in a
graphical interface and thus can be considered a View you’re completely disregarding other types of web response
data, like JSON and XML.  How does a JSON object returned for an AJAX request really represent a “view” of something?
I don’t believe that it does.&lt;/p&gt;

&lt;p&gt;We need to break away from tradition.  What is the View &lt;em&gt;really&lt;/em&gt; doing?  What is it truly responsible for?
Well, in SprayFire the “View” is responsible for generating a &lt;strong&gt;response&lt;/strong&gt;, based on data gathered by
the Controller from the Model.  Since sending HTTP headers is so directly tied to sending output we also delegate that
responsibility to the “View” as well.  If you boil away all the extra stuff you wind up coming to the realization that the
“View” is really generating and sending a response.  This sounds to me more like a &lt;strong&gt;Responder&lt;/strong&gt; and not something
that is a View.&lt;/p&gt;

&lt;p&gt;An obvious example of a Responder would be &lt;code&gt;HtmlResponder&lt;/code&gt;.  It would take data from the Controller, put that
data into some kind of HTML template system and then output the resulting HTML.  Pretty simple stuff really.  A &lt;code&gt;JsonResponder&lt;/code&gt;
would be pretty similar.  Except sending JSON instead of HTML.  It would take the data from the controller, turn it into an appropriate JSON object,
and  then send the response along with the appropriate headers for that response type.  Its pretty easy to see from here that you might also
create a &lt;code&gt;XmlResponder&lt;/code&gt; or maybe even a &lt;code&gt;RssResponder&lt;/code&gt;.  Ultimately though, regardless of the type of
data, its all just a &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;controller-talks-to-model-for-the-responder&quot;&gt;Controller talks to Model for the Responder&lt;/h3&gt;

&lt;p&gt;We have a layer to gather the appropriate data for a response, Model.  We have a layer to generate that response and send it to the user,
Responder.  Now we need a way to get that data from the Model to the Responder.  This is where Controller comes in, think of it
as a translator of sorts.  The Model and Responder are two foreign dignitaries that must work together but don’t speak each
other’s language.  The Controller is there to facilitate this communication.  A request comes in, the Controller talks to the Model, gets
the appropriate data and then “translates” it into something a Responder can use.  Ultimately, that’s all the Controller is responsible for.
Getting data from the Model to the Responder.&lt;/p&gt;

&lt;h3 id=&quot;theres-more-to-web-mvc-than-the-m-the-delvdel-r-and-the-c&quot;&gt;there’s more to web MVC than the M, the &lt;del&gt;V&lt;/del&gt; R, and the C&lt;/h3&gt;

&lt;p&gt;Much like other frameworks SprayFire uses other objects to help facilitate the interaction of the three primary layers.  I won’t go into
much detail about these objects here but I will list some of them.  Other articles will come that discusses their role in &lt;strong&gt;MRC&lt;/strong&gt;,
SprayFire’s interpretation of the MVC design pattern.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Front Controller&lt;/li&gt;
  &lt;li&gt;Router&lt;/li&gt;
  &lt;li&gt;Components&lt;/li&gt;
  &lt;li&gt;Behaviors&lt;/li&gt;
  &lt;li&gt;Helpers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tldr&quot;&gt;tl;dr&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Model === Your app&lt;/li&gt;
  &lt;li&gt;Model !== database storage&lt;/li&gt;
  &lt;li&gt;View === Responder&lt;/li&gt;
  &lt;li&gt;View !== HTML&lt;/li&gt;
  &lt;li&gt;Controller === Mediator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;If you got this far, thanks for reading my article.  I hope it, at the very least, was thought provoking.
Important to take away though is that design patterns are &lt;em&gt;guides&lt;/em&gt; for solving a problem.  They are
not set-in-stone processes that must be followed blindly simply because somebody else did it that way.  Innovation
does not happen in the status quo.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">comments aren't evil; comment your code</title>
   <link href="http://blog.cspray.net/programming/2012/01/02/comments-arent-evil.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2012-01-02T00:00:00-05:00</updated>
   <published>2012-01-02T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2012/01/02/comments-arent-evil</id>
   <content type="html">&lt;ul class=&quot;no-list-icon no-padding&quot;&gt;
    &lt;li&gt;
        &lt;p&gt;&lt;b&gt;Dissenter:&lt;/b&gt; Charles, you &lt;i&gt;noob&lt;/i&gt;!  Comments &lt;b&gt;are&lt;/b&gt; evil.  They can muddy up
        your code, nobody keeps them up to date and they&#39;re completely unnecessary.  Write short, concise
        code and you don&#39;t need comments!&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;&lt;b&gt;Me:&lt;/b&gt; You&#39;re absolutely right.  Comments can be evil.  But you&#39;re taking it too far!
        Not all comments are evil and the innocent are perishing in your genocide!&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;&lt;b&gt;Dissenter:&lt;/b&gt; Hog-wallop!  All comments are evil.  You have simply not transcended to a
        higher level of programming.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;&lt;b&gt;Me:&lt;/b&gt; Perhaps.  But, comments are not inherently evil.  Their &lt;i&gt;intent&lt;/i&gt;, the methods
        in which they are utilized, is the true evil!  Comments don&#39;t kill code, programmer&#39;s kill code.&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was the envisioned conversation when you saw my bait title and wanted to come tell the new guy
how comments are evil.  Well, now that&#39;s out of the way let&#39;s get to the post.  Comments, they aren&#39;t all
bad.&lt;/p&gt;

&lt;h3&gt;stop blaming the comments for how &lt;b&gt;you&lt;/b&gt; use them&lt;/h3&gt;

&lt;p&gt;Let me start off by saying that I am &lt;b&gt;not&lt;/b&gt; encouraging the use of comments everywhere in your
code.  Unnecessary comments really are bad for your codebase.  They&#39;re clutter, can be misleading and
are a pain to keep up to date, so nobody keeps them up to date.  And certainly if you&#39;re doing something like...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// assign &amp;#39;foo&amp;#39; to $foo&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// $foo is now &amp;#39;foobar&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// call someMethod() on $foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please, &lt;b&gt;PLEASE&lt;/b&gt;, stop doing this.  Please.&lt;/p&gt;

&lt;p&gt;That being said this isn&#39;t the comments fault.  This is &lt;b&gt;our&lt;/b&gt; fault.  We are the ones that
chose to put the comments there and create needless clutter.  Stop blaming the comments and start looking
in the mirror.&lt;/p&gt;

&lt;h3&gt;doc-block all the things&lt;/h3&gt;

&lt;p&gt;If it is a constant, class member, returns a value, takes a parameter, results in some side effect
or is in some way a major block of code it should be documented.&lt;/p&gt;

&lt;blockquote&gt;&lt;b&gt;Dissenter:&lt;/b&gt; Charles you fool!  You want me to document &lt;i&gt;getters&lt;/i&gt;?!  Excuse me while I
ignore you now.&lt;/blockquote&gt;

&lt;p&gt;Wait!  Before you go, let me explain.  I don&#39;t mean add a description to a &lt;code&gt;getFoo()&lt;/code&gt;
method that simply says &quot;return $Foo&quot;.  That&#39;s just plain silly!  What you can do however is document
the &lt;i&gt;type&lt;/i&gt; being returned.  This is highly important with a dynamically typed language, you don&#39;t
really ever know what type a variable is until you do some kind of test on it.  Here&#39;s an example of a,
&lt;i&gt;gasp&lt;/i&gt;, documented getter.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// inside a class somewhere...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;     * @return A Foo object that stores info about each doohickey&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// some code is here...it returns something&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See, that&#39;s not so bad is it?  You&#39;re not really adding a lot of clutter but you&#39;re giving users of
your API the knowledge that when I call &lt;code&gt;getFoo()&lt;/code&gt; I&#39;m gonna get an object, and that object
has the info about the doohickey I need.  In addition a lot of modern IDEs can parse this and return
useful auto-complete and documentation information based on these &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html&quot;&gt;JavaDoc&lt;/a&gt;
style tags.&lt;/p&gt;

&lt;h3&gt;finally, comment your cleverness&lt;/h3&gt;

&lt;p&gt;Sometimes, regardless of how well we name our variables and how elegant our code is we simply &lt;b&gt;must&lt;/b&gt;
have in-line comments.  A lot of articles about writing comments will say this but then they never actually
give a real-life example of a situation where you might need to write an in-line comment.  Well, don&#39;t worry,
I&#39;m gonna give you what you need.&lt;/p&gt;

&lt;p&gt;Below is a closure I use as an error handler before I can set up a more robust class-based error handler.
It doesn&#39;t do much but trap errors and store the information in an array.  Anyway, here&#39;s the closure, without
any comments:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$errorCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$normalizeSeverity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;nv&quot;&gt;$severityMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;E_WARNING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_WARNING&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;E_NOTICE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_NOTICE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;E_USER_ERROR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_USER_ERROR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;E_USER_WARNING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_USER_WARNING&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;E_USER_NOTICE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_USER_NOTICE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;E_USER_DEPRECATED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_USER_DEPRECATED&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;E_RECOVERABLE_ERROR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_RECOVERABLE_ERROR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;             &lt;span class=&quot;nx&quot;&gt;E_DEPRECATED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_DEPRECATED&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\array_key_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$severityMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$severityMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E_UNKOWN_SEVERITY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;severity&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$normalizeSeverity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$unhandledSeverity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;E_RECOVERABLE_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unhandledSeverity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\set_error_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$errorCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;This closure is also stored as a &lt;a href=&quot;https://gist.github.com/1542873&quot;&gt;github gist&lt;/a&gt;.  Please
feel free to fork and make changes or improvements.  If you make a really cool improvement let me know!&lt;/blockquote&gt;

&lt;p&gt;The closure is pretty simple really.  It takes the appropriate arguments needed to satisfy the
&lt;a href=&quot;http://www.php.net/manual/en/function.set-error-handler.php&quot;&gt;&lt;code&gt;set_error_handler()&lt;/code&gt;&lt;/a&gt; callback.
It also uses an array-by-reference outside of the closure to store the errors so we can access them later.  I
added a bit of severity normalization so error info doesn&#39;t have seemingly random integers in them.  What may be &quot;tricky&quot;,
particularly to a new developer on the project, is the last little bit involving the &lt;code&gt;$unhandledSeverity&lt;/code&gt;.  What
is that?  Anybody can see that for &lt;code&gt;E_RECOVERABLE_ERROR&lt;/code&gt; we&#39;re returning false and internal
PHP error handling continues.  But, why?  Let&#39;s go ahead and take that out.  I mean its a recoverable
error, right?  So, we should probably be doing something with it.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Wrong.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;That little chunk of code is there for a very specific, very important reason.  Did you know that
if an improper type is passed to a function an &lt;code&gt;E_RECOVERABLE_ERROR&lt;/code&gt; is raised?  If we simply
trapped that error we&#39;d allow &lt;b&gt;any&lt;/b&gt; data type to be stored where only a specific type should be.  This
certainly doesn&#39;t seem like a recoverable error to me.  We need that line of code or else countless
errors will occur later.&lt;/p&gt;

&lt;p&gt;Comment it!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// this is here to return errors on improper type passed as argument&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$unhandledSeverity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;E_RECOVERABLE_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unhandledSeverity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p style=&quot;margin-top:1em;&quot;&gt;I would definitely say that the added &quot;clutter&quot; is far outweighed by the &lt;b&gt;extremely, useful information&lt;/b&gt; that
the comment conveys and would be difficult to say in code.  You won&#39;t find many in-line comments in my
code but anytime I think something looks a little too clever or isn&#39;t &lt;i&gt;perfectly clear&lt;/i&gt; as to what
is going on I&#39;ll throw a simple comment for explanation.&lt;/p&gt;

&lt;h3&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;I hope you look at your code and see where maybe some documentation should be added, or even taken
away.  Remember that comments are available to us for a reason.  Any tool can be utilized effectively
to provide benefit, just as that same tool can be used for evil.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="text">writing better commits with github</title>
   <link href="http://blog.cspray.net/programming/2011/12/31/writing-better-commits-with-github.html"/>
   <author>
        <name>Charles Sprayberry</name>
   </author>
   <updated>2011-12-31T00:00:00-05:00</updated>
   <published>2011-12-31T00:00:00-05:00</published>
   <id>http://cspray.github.io/programming/2011/12/31/writing-better-commits-with-github</id>
   <content type="html">&lt;p&gt;As the development of SprayFire progresses I&#39;m constantly evaluating what I&#39;m doing, how I&#39;m doing it
and what tools I&#39;m using.  Lately I&#39;ve been thinking about the way I use &lt;strong&gt;git&lt;/strong&gt;, my
version control software of choice.  Looking through some of the commits for SprayFire I can tell that
my commit strategy needs some work.  Commit messages are sometimes lengthy or don&#39;t really convey what
the commit is doing.  What are some things that I can do to improve my commits and make for a more maintainable project?&lt;/p&gt;

&lt;h3&gt;commit, commit, commit&lt;/h3&gt;
&lt;p&gt;Well, the first thing is to simply commit more often.  Too often I find myself making a series of
small refactors and never commiting my changes between refactors.  Next thing I know I&#39;ve found myself
making a single commit where the entire file has changed and instead I should have made three or four
smaller commits changing a fragment of the file at a time.&lt;/p&gt;
&lt;p&gt;While small, simple classes can make this easy to get away with it can bite you when your classes
become more complex.  It is important to establish a &quot;muscle memory&quot; if you will.  What you do with
your small, simple classes will wind up translating over into the bigger, complex classes.  If you
&lt;em&gt;always&lt;/em&gt; commit early and often then you never wind up finding yourself refactoring an entire file
between commits.&lt;/p&gt;

&lt;h3&gt;thou shalst format thy commits&lt;/h3&gt;
&lt;p&gt;Please, for all that is good and right in this world, have a consistent format for commit messages.
While my own messages could certainly use some work in this regard one of the things I do adhere to
is a 3 letter prefix on every commit that tells me what I&#39;m doing.  Here&#39;s a list of my prefixes
and what they mean:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
    &lt;pre&gt;
---------------------------------------------------------------------------------
| Prefix                    |       Meaning                                     |
---------------------------------------------------------------------------------
|   ADD                     | I have created a new file that did not previously |
|                           | exist in the repository.                          |
---------------------------------------------------------------------------------
|   UPD                     | I have updated a file that already exists in the  |
|                           | repository.                                       |
---------------------------------------------------------------------------------
|   DEL                     | I have removed a file from the repository.        |
---------------------------------------------------------------------------------
|   DEL &amp;amp; ADD               | I have renamed or moved a file                    |
---------------------------------------------------------------------------------
    &lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This makes it easy to look through commits and tell at a glance what I&#39;ve done.  It also makes looking
for commits with &lt;code&gt;git log&lt;/code&gt; extremely easy.  Wanna know about any deleted files?  As simple as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --grep=DEL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Although I have a prefix strategy after that it has been pretty much free-for-all.  Perhaps instead
I should have a concrete format for commits.  Maybe something that looks like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;i&gt;prefix&lt;/i&gt; class_or_file message [&lt;i&gt;issue link&lt;/i&gt;]&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;use github&#39;s resources&lt;/h3&gt;
&lt;p&gt;The wonderful thing about github is the simple, flexible, open-source tools they make available to you.
This blog for example is powered by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;github&#39;s very own Jekyll&lt;/a&gt;.  Not
only that but they provide you with issue/milestone tracking and a simple wiki.  Certainly for larger projects
these tools may not be sufficient but for intermediate use these are wonderful tools to help manage your
project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write an issue for everything you want to do.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yea, that&#39;s right.  If it is an important part of your application, and let&#39;s face it what isn&#39;t,
or needs to be done write up an issue.  Tag a label onto it, assign it to somebody.  Assign it to a milestone,
a concrete goal for what you want your application to do. The reasons to do this go beyond just making clean
commits but helps guide you to a better application.  You&#39;re much more likely to rewrite a flawed design
typed up as an issue as compared to if you actually took the time to implement that flawed design.  This has
already saved me countless times with SprayFire.  You also get the satisfaction of closing issues and seeing
actual progress with your application.&lt;/p&gt;

&lt;p&gt;But, I started to ramble.  How does that impact our github commit messages?  Well, remember those wonderful
tools that github provides for you?  Part of that is referencing issues and milestones from within commits.
Does the commit you just made have an issue associated with it?  At the end of the commit message add
something that looks like: &lt;code&gt;cspray/SprayFire#1&lt;/code&gt;, replacing your github username, repository name
and issue number as appropriate.  You automatically get a link to that issue in your commit and, even
cooler, the commit shows up when you look at the issue!  This can be an incredibly handy tool to easily
get the documentation needed for a given issue or commit.&lt;/p&gt;

&lt;p&gt;
Even cooler, as detailed at the &lt;a href=&quot;https://github.com/blog/831-issues-2-0-the-next-generation&quot;&gt;github blog&lt;/a&gt;, you can actually &lt;strong&gt;close&lt;/strong&gt; issues
with commit messages!  Awesome!  Just prefix your issue number or link with any of the below words:
&lt;ul style=&quot;list-style-position:inside;&quot;&gt;
&lt;li&gt;fixes&lt;/li&gt;
&lt;li&gt;fixed&lt;/li&gt;
&lt;li&gt;fix&lt;/li&gt;
&lt;li&gt;closes&lt;/li&gt;
&lt;li&gt;closed&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;h3&gt;wrapping it up&lt;/h3&gt;

&lt;p&gt;Well, now that I&#39;ve talked about making better git commits I think I&#39;m gonna go make some of my
own.  Happy committing.&lt;/p&gt;
</content>
 </entry>
 

</feed>
